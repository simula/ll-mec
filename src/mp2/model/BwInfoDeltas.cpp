/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BwInfoDeltas.h"

namespace llmec {
namespace mp2 {
namespace model {

BwInfoDeltas::BwInfoDeltas()
{
    m_AppInsId = "";
    m_AppInsIdIsSet = false;
    m_RequestTypeIsSet = false;
    m_SessionFilterIsSet = false;
    m_FixedBWPriorityIsSet = false;
    m_FixedAllocation = "";
    m_FixedAllocationIsSet = false;
    m_AllocationDirectionIsSet = false;
    
}

BwInfoDeltas::~BwInfoDeltas()
{
}

void BwInfoDeltas::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const BwInfoDeltas& o)
{
    j = nlohmann::json();
    if(o.appInsIdIsSet())
        j["appInsId"] = o.m_AppInsId;
    if(o.requestTypeIsSet())
        j["requestType"] = o.m_RequestType;
    if(o.sessionFilterIsSet())
        j["sessionFilter"] = o.m_SessionFilter;
    if(o.fixedBWPriorityIsSet())
        j["fixedBWPriority"] = o.m_FixedBWPriority;
    if(o.fixedAllocationIsSet())
        j["fixedAllocation"] = o.m_FixedAllocation;
    if(o.allocationDirectionIsSet())
        j["allocationDirection"] = o.m_AllocationDirection;
}

void from_json(const nlohmann::json& j, BwInfoDeltas& o)
{
    if(j.contains("appInsId"))
    {
        j.at("appInsId").get_to(o.m_AppInsId);
        o.m_AppInsIdIsSet = true;
    } 
    if(j.contains("requestType"))
    {
        j.at("requestType").get_to(o.m_RequestType);
        o.m_RequestTypeIsSet = true;
    } 
    if(j.contains("sessionFilter"))
    {
        j.at("sessionFilter").get_to(o.m_SessionFilter);
        o.m_SessionFilterIsSet = true;
    } 
    if(j.contains("fixedBWPriority"))
    {
        j.at("fixedBWPriority").get_to(o.m_FixedBWPriority);
        o.m_FixedBWPriorityIsSet = true;
    } 
    if(j.contains("fixedAllocation"))
    {
        j.at("fixedAllocation").get_to(o.m_FixedAllocation);
        o.m_FixedAllocationIsSet = true;
    } 
    if(j.contains("allocationDirection"))
    {
        j.at("allocationDirection").get_to(o.m_AllocationDirection);
        o.m_AllocationDirectionIsSet = true;
    } 
}

std::string BwInfoDeltas::getAppInsId() const
{
    return m_AppInsId;
}
void BwInfoDeltas::setAppInsId(std::string const& value)
{
    m_AppInsId = value;
    m_AppInsIdIsSet = true;
}
bool BwInfoDeltas::appInsIdIsSet() const
{
    return m_AppInsIdIsSet;
}
void BwInfoDeltas::unsetAppInsId()
{
    m_AppInsIdIsSet = false;
}
RequestType BwInfoDeltas::getRequestType() const
{
    return m_RequestType;
}
void BwInfoDeltas::setRequestType(RequestType const& value)
{
    m_RequestType = value;
    m_RequestTypeIsSet = true;
}
bool BwInfoDeltas::requestTypeIsSet() const
{
    return m_RequestTypeIsSet;
}
void BwInfoDeltas::unsetRequestType()
{
    m_RequestTypeIsSet = false;
}
std::vector<SessionFilterElement>& BwInfoDeltas::getSessionFilter()
{
    return m_SessionFilter;
}
bool BwInfoDeltas::sessionFilterIsSet() const
{
    return m_SessionFilterIsSet;
}
void BwInfoDeltas::unsetSessionFilter()
{
    m_SessionFilterIsSet = false;
}
FixedBWPriority BwInfoDeltas::getFixedBWPriority() const
{
    return m_FixedBWPriority;
}
void BwInfoDeltas::setFixedBWPriority(FixedBWPriority const& value)
{
    m_FixedBWPriority = value;
    m_FixedBWPriorityIsSet = true;
}
bool BwInfoDeltas::fixedBWPriorityIsSet() const
{
    return m_FixedBWPriorityIsSet;
}
void BwInfoDeltas::unsetFixedBWPriority()
{
    m_FixedBWPriorityIsSet = false;
}
std::string BwInfoDeltas::getFixedAllocation() const
{
    return m_FixedAllocation;
}
void BwInfoDeltas::setFixedAllocation(std::string const& value)
{
    m_FixedAllocation = value;
    m_FixedAllocationIsSet = true;
}
bool BwInfoDeltas::fixedAllocationIsSet() const
{
    return m_FixedAllocationIsSet;
}
void BwInfoDeltas::unsetFixedAllocation()
{
    m_FixedAllocationIsSet = false;
}
AllocationDirection BwInfoDeltas::getAllocationDirection() const
{
    return m_AllocationDirection;
}
void BwInfoDeltas::setAllocationDirection(AllocationDirection const& value)
{
    m_AllocationDirection = value;
    m_AllocationDirectionIsSet = true;
}
bool BwInfoDeltas::allocationDirectionIsSet() const
{
    return m_AllocationDirectionIsSet;
}
void BwInfoDeltas::unsetAllocationDirection()
{
    m_AllocationDirectionIsSet = false;
}

}
}
}

