/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BwInfo.h"

namespace llmec {
namespace mp2 {
namespace model {

BwInfo::BwInfo()
{
    m_TimeStampIsSet = false;
    m_AppInsId = "";
    m_SessionFilterIsSet = false;
    m_FixedBWPriorityIsSet = false;
    m_FixedAllocation = "";
    
}

BwInfo::~BwInfo()
{
}

void BwInfo::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const BwInfo& o)
{
    j = nlohmann::json();
    if(o.timeStampIsSet())
        j["timeStamp"] = o.m_TimeStamp;
    j["appInsId"] = o.m_AppInsId;
    j["requestType"] = o.m_RequestType;
    if(o.sessionFilterIsSet())
        j["sessionFilter"] = o.m_SessionFilter;
    if(o.fixedBWPriorityIsSet())
        j["fixedBWPriority"] = o.m_FixedBWPriority;
    j["fixedAllocation"] = o.m_FixedAllocation;
    j["allocationDirection"] = o.m_AllocationDirection;
}

void from_json(const nlohmann::json& j, BwInfo& o)
{
    if(j.contains("timeStamp"))
    {
        j.at("timeStamp").get_to(o.m_TimeStamp);
        o.m_TimeStampIsSet = true;
    } 
    j.at("appInsId").get_to(o.m_AppInsId);
    j.at("requestType").get_to(o.m_RequestType);
    if(j.contains("sessionFilter"))
    {
        j.at("sessionFilter").get_to(o.m_SessionFilter);
        o.m_SessionFilterIsSet = true;
    } 
    if(j.contains("fixedBWPriority"))
    {
        j.at("fixedBWPriority").get_to(o.m_FixedBWPriority);
        o.m_FixedBWPriorityIsSet = true;
    } 
    j.at("fixedAllocation").get_to(o.m_FixedAllocation);
    j.at("allocationDirection").get_to(o.m_AllocationDirection);
}

TimeStamp BwInfo::getTimeStamp() const
{
    return m_TimeStamp;
}
void BwInfo::setTimeStamp(TimeStamp const& value)
{
    m_TimeStamp = value;
    m_TimeStampIsSet = true;
}
bool BwInfo::timeStampIsSet() const
{
    return m_TimeStampIsSet;
}
void BwInfo::unsetTimeStamp()
{
    m_TimeStampIsSet = false;
}
std::string BwInfo::getAppInsId() const
{
    return m_AppInsId;
}
void BwInfo::setAppInsId(std::string const& value)
{
    m_AppInsId = value;
    
}
RequestType BwInfo::getRequestType() const
{
    return m_RequestType;
}
void BwInfo::setRequestType(RequestType const& value)
{
    m_RequestType = value;
    
}
std::vector<SessionFilterElement>& BwInfo::getSessionFilter()
{
    return m_SessionFilter;
}
bool BwInfo::sessionFilterIsSet() const
{
    return m_SessionFilterIsSet;
}
void BwInfo::unsetSessionFilter()
{
    m_SessionFilterIsSet = false;
}
FixedBWPriority BwInfo::getFixedBWPriority() const
{
    return m_FixedBWPriority;
}
void BwInfo::setFixedBWPriority(FixedBWPriority const& value)
{
    m_FixedBWPriority = value;
    m_FixedBWPriorityIsSet = true;
}
bool BwInfo::fixedBWPriorityIsSet() const
{
    return m_FixedBWPriorityIsSet;
}
void BwInfo::unsetFixedBWPriority()
{
    m_FixedBWPriorityIsSet = false;
}
std::string BwInfo::getFixedAllocation() const
{
    return m_FixedAllocation;
}
void BwInfo::setFixedAllocation(std::string const& value)
{
    m_FixedAllocation = value;
    
}
AllocationDirection BwInfo::getAllocationDirection() const
{
    return m_AllocationDirection;
}
void BwInfo::setAllocationDirection(AllocationDirection const& value)
{
    m_AllocationDirection = value;
    
}

}
}
}

