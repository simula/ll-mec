/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SessionFilterElement.h"

namespace llmec {
namespace mp2 {
namespace model {

SessionFilterElement::SessionFilterElement()
{
    m_SourceIp = "";
    m_SourceIpIsSet = false;
    m_SourcePortIsSet = false;
    m_DstAddress = "";
    m_DstAddressIsSet = false;
    m_DstPortIsSet = false;
    m_Protocol = "";
    m_ProtocolIsSet = false;
    
}

SessionFilterElement::~SessionFilterElement()
{
}

void SessionFilterElement::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const SessionFilterElement& o)
{
    j = nlohmann::json();
    if(o.sourceIpIsSet())
        j["sourceIp"] = o.m_SourceIp;
    if(o.sourcePortIsSet())
        j["sourcePort"] = o.m_SourcePort;
    if(o.dstAddressIsSet())
        j["dstAddress"] = o.m_DstAddress;
    if(o.dstPortIsSet())
        j["dstPort"] = o.m_DstPort;
    if(o.protocolIsSet())
        j["protocol"] = o.m_Protocol;
}

void from_json(const nlohmann::json& j, SessionFilterElement& o)
{
    if(j.contains("sourceIp"))
    {
        j.at("sourceIp").get_to(o.m_SourceIp);
        o.m_SourceIpIsSet = true;
    } 
    if(j.contains("sourcePort"))
    {
        j.at("sourcePort").get_to(o.m_SourcePort);
        o.m_SourcePortIsSet = true;
    } 
    if(j.contains("dstAddress"))
    {
        j.at("dstAddress").get_to(o.m_DstAddress);
        o.m_DstAddressIsSet = true;
    } 
    if(j.contains("dstPort"))
    {
        j.at("dstPort").get_to(o.m_DstPort);
        o.m_DstPortIsSet = true;
    } 
    if(j.contains("protocol"))
    {
        j.at("protocol").get_to(o.m_Protocol);
        o.m_ProtocolIsSet = true;
    } 
}

std::string SessionFilterElement::getSourceIp() const
{
    return m_SourceIp;
}
void SessionFilterElement::setSourceIp(std::string const& value)
{
    m_SourceIp = value;
    m_SourceIpIsSet = true;
}
bool SessionFilterElement::sourceIpIsSet() const
{
    return m_SourceIpIsSet;
}
void SessionFilterElement::unsetSourceIp()
{
    m_SourceIpIsSet = false;
}
std::vector<std::string>& SessionFilterElement::getSourcePort()
{
    return m_SourcePort;
}
bool SessionFilterElement::sourcePortIsSet() const
{
    return m_SourcePortIsSet;
}
void SessionFilterElement::unsetSourcePort()
{
    m_SourcePortIsSet = false;
}
std::string SessionFilterElement::getDstAddress() const
{
    return m_DstAddress;
}
void SessionFilterElement::setDstAddress(std::string const& value)
{
    m_DstAddress = value;
    m_DstAddressIsSet = true;
}
bool SessionFilterElement::dstAddressIsSet() const
{
    return m_DstAddressIsSet;
}
void SessionFilterElement::unsetDstAddress()
{
    m_DstAddressIsSet = false;
}
std::vector<std::string>& SessionFilterElement::getDstPort()
{
    return m_DstPort;
}
bool SessionFilterElement::dstPortIsSet() const
{
    return m_DstPortIsSet;
}
void SessionFilterElement::unsetDstPort()
{
    m_DstPortIsSet = false;
}
std::string SessionFilterElement::getProtocol() const
{
    return m_Protocol;
}
void SessionFilterElement::setProtocol(std::string const& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool SessionFilterElement::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void SessionFilterElement::unsetProtocol()
{
    m_ProtocolIsSet = false;
}

}
}
}

