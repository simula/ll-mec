/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SessionFilterElement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SessionFilterElement::SessionFilterElement()
{
    m_SourceIp = "";
    m_SourceIpIsSet = false;
    m_SourcePortIsSet = false;
    m_DstAddress = "";
    m_DstAddressIsSet = false;
    m_DstPortIsSet = false;
    m_Protocol = "";
    m_ProtocolIsSet = false;
    
}

SessionFilterElement::~SessionFilterElement()
{
}

void SessionFilterElement::validate()
{
    // TODO: implement validation
}

nlohmann::json SessionFilterElement::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SourceIpIsSet)
    {
        val["sourceIp"] = ModelBase::toJson(m_SourceIp);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_SourcePort )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["sourcePort"] = jsonArray;
        } 
    }
    if(m_DstAddressIsSet)
    {
        val["dstAddress"] = ModelBase::toJson(m_DstAddress);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_DstPort )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["dstPort"] = jsonArray;
        } 
    }
    if(m_ProtocolIsSet)
    {
        val["protocol"] = ModelBase::toJson(m_Protocol);
    }
    

    return val;
}

void SessionFilterElement::fromJson(const nlohmann::json& val)
{
    if(val.find("sourceIp") != val.end())
    {
        setSourceIp(val.at("sourceIp"));
    }
    {
        m_SourcePort.clear();
        if(val.find("sourcePort") != val.end())
        {
            for( const auto& item : val["sourcePort"] )
            {
                m_SourcePort.push_back(item);
                
            }
        }
    }
    if(val.find("dstAddress") != val.end())
    {
        setDstAddress(val.at("dstAddress"));
    }
    {
        m_DstPort.clear();
        if(val.find("dstPort") != val.end())
        {
            for( const auto& item : val["dstPort"] )
            {
                m_DstPort.push_back(item);
                
            }
        }
    }
    if(val.find("protocol") != val.end())
    {
        setProtocol(val.at("protocol"));
    }
    
}


std::string SessionFilterElement::getSourceIp() const
{
    return m_SourceIp;
}
void SessionFilterElement::setSourceIp(std::string const& value)
{
    m_SourceIp = value;
    m_SourceIpIsSet = true;
}
bool SessionFilterElement::sourceIpIsSet() const
{
    return m_SourceIpIsSet;
}
void SessionFilterElement::unsetSourceIp()
{
    m_SourceIpIsSet = false;
}
std::vector<std::string>& SessionFilterElement::getSourcePort()
{
    return m_SourcePort;
}
bool SessionFilterElement::sourcePortIsSet() const
{
    return m_SourcePortIsSet;
}
void SessionFilterElement::unsetSourcePort()
{
    m_SourcePortIsSet = false;
}
std::string SessionFilterElement::getDstAddress() const
{
    return m_DstAddress;
}
void SessionFilterElement::setDstAddress(std::string const& value)
{
    m_DstAddress = value;
    m_DstAddressIsSet = true;
}
bool SessionFilterElement::dstAddressIsSet() const
{
    return m_DstAddressIsSet;
}
void SessionFilterElement::unsetDstAddress()
{
    m_DstAddressIsSet = false;
}
std::vector<std::string>& SessionFilterElement::getDstPort()
{
    return m_DstPort;
}
bool SessionFilterElement::dstPortIsSet() const
{
    return m_DstPortIsSet;
}
void SessionFilterElement::unsetDstPort()
{
    m_DstPortIsSet = false;
}
std::string SessionFilterElement::getProtocol() const
{
    return m_Protocol;
}
void SessionFilterElement::setProtocol(std::string const& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool SessionFilterElement::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void SessionFilterElement::unsetProtocol()
{
    m_ProtocolIsSet = false;
}

}
}
}
}

