/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "BwInfo.h"
#include "BwInfoDeltas.h"
//#include "Object.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  DefaultApi {
public:
    DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~DefaultApi() {}
    void init();

    const std::string base = "/bwm/v1";

private:
    void setupRoutes();

    void bw_allocations_allocation_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bw_allocations_allocation_id_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bw_allocations_allocation_id_patch_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bw_allocations_allocation_id_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bw_allocations_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void bw_allocations_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Remove a specific bandwidthAllocation resource. DELETE method is typically used in \&quot;Unregister from Bandwidth Management Service\&quot; procedure
    /// </remarks>
    /// <param name="allocationId">Represents a bandwidth allocation instance</param>
    virtual void bw_allocations_allocation_id_delete(const std::string &allocationId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves information about a specific bandwidthAllocation resource. 
    /// </remarks>
    /// <param name="allocationId">Represents a bandwidth allocation instance</param>
    virtual void bw_allocations_allocation_id_get(const std::string &allocationId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates the information about a specific bandwidthAllocation resource. 
    /// </remarks>
    /// <param name="allocationId">Represents a bandwidth allocation instance</param>
    /// <param name="bwInfoDeltas">Description of the changes to instruct the server how to modify the resource representation. </param>
    virtual void bw_allocations_allocation_id_patch(const std::string &allocationId, const BwInfoDeltas &bwInfoDeltas, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method updates the information about a specific bandwidthAllocation resource. 
    /// </remarks>
    /// <param name="allocationId">Represents a bandwidth allocation instance</param>
    /// <param name="bwInfo">BwInfo with updated information is included as entity body of the request</param>
    virtual void bw_allocations_allocation_id_put(const std::string &allocationId, const BwInfo &bwInfo, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method retrieves information about a list of bandwidthAllocation resources
    /// </remarks>
    /// <param name="appInsId">Application Instance ID (optional, default to &quot;&quot;)</param>
    /// <param name="applicationName">Application Name (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="sessionId">Session Identifier for use in IP-based multimedia communication systems that enables endpoints as a bit string (size (28)), as defined in RFC 7329 (optional, default to std::vector&lt;std::string&gt;())</param>
    virtual void bw_allocations_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &applicationName, const Pistache::Optional<std::vector<std::string>> &sessionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is used to create a bandwidthAllocation resource.
    /// </remarks>
    /// <param name="bwInfo">BwInfo with updated information is included as entity body of the request</param>
    virtual void bw_allocations_post(const BwInfo &bwInfo, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* DefaultApi_H_ */

