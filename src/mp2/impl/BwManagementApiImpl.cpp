/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "BwManagementApiImpl.h"

namespace llmec {
namespace mp2 {
namespace api {

using namespace llmec::mp2::model;

BwManagementApiImpl::BwManagementApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : BwManagementApi(rtr)
    { }

void BwManagementApiImpl::bw_allocations_allocation_id_delete(const std::string &allocationId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BwManagementApiImpl::bw_allocations_allocation_id_get(const std::string &allocationId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BwManagementApiImpl::bw_allocations_allocation_id_patch(const std::string &allocationId, const BwInfoDeltas &bwInfoDeltas, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BwManagementApiImpl::bw_allocations_allocation_id_put(const std::string &allocationId, const BwInfo &bwInfo, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BwManagementApiImpl::bw_allocations_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &applicationName, const Pistache::Optional<std::vector<std::string>> &sessionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BwManagementApiImpl::bw_allocations_post(const BwInfo &bwInfo, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}

