/**
* BWM API
* The ETSI MEC ISG MEC015 Bandwidth Management API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "pistache/endpoint.h"
#include "pistache/http.h"
#include "pistache/router.h"
#ifdef __linux__
#include <vector>
#include <signal.h>
#include <unistd.h>
#endif

#include "mp2-api-server.h"

#define PISTACHE_SERVER_THREADS 2

static Pistache::Http::Endpoint *httpEndpoint;
#ifdef __linux__
static void sigHandler(int sig){
    switch(sig){
        case SIGINT:
        case SIGQUIT:
        case SIGTERM:
        case SIGHUP:
        default:
            httpEndpoint->shutdown();
            break;
    }
    exit(0);
}

static void setUpUnixSignals(std::vector<int> quitSignals) {
    sigset_t blocking_mask;
    sigemptyset(&blocking_mask);
    for (auto sig : quitSignals)
        sigaddset(&blocking_mask, sig);

    struct sigaction sa;
    sa.sa_handler = sigHandler;
    sa.sa_mask    = blocking_mask;
    sa.sa_flags   = 0;

    for (auto sig : quitSignals)
        sigaction(sig, &sa, nullptr);
}
#endif

using namespace llmec::mp2::api;

void Mp2Manager::init(size_t thr) {
	auto opts = Pistache::Http::Endpoint::options()
	.threads(thr);
	m_httpEndpoint->init(opts);
	m_bwmApiserver->init();
}
void Mp2Manager::start(){
	m_httpEndpoint->setHandler(m_router->handler());
	m_httpEndpoint->serve();

}
void Mp2Manager::shutdown(){
	m_httpEndpoint->shutdown();
}


/*
int main() {
#ifdef __linux__
    std::vector<int> sigs{SIGQUIT, SIGINT, SIGTERM, SIGHUP};
    setUpUnixSignals(sigs);
#endif

    Pistache::Address addr(Pistache::Ipv4::any(), Pistache::Port(8282));
    Mp2Manager mp2_manager(addr);
    mp2_manager.init(2);
    mp2_manager.start();
    mp2_manager.shutdown();

}
*/

