/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "S1BearerInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

S1BearerInfo::S1BearerInfo()
{
    m_TimeStampIsSet = false;
    
}

S1BearerInfo::~S1BearerInfo()
{
}

void S1BearerInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json S1BearerInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TimeStampIsSet)
    {
        val["timeStamp"] = ModelBase::toJson(m_TimeStamp);
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_S1UeInfo )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["s1UeInfo"] = jsonArray;
        
    }
    

    return val;
}

void S1BearerInfo::fromJson(const nlohmann::json& val)
{
    if(val.find("timeStamp") != val.end())
    {
        if(!val["timeStamp"].is_null())
        {
            TimeStamp newItem;
            newItem.fromJson(val["timeStamp"]);
            setTimeStamp( newItem );
        }
        
    }
    {
        m_S1UeInfo.clear();
                    for( const auto& item : val["s1UeInfo"] )
            {
                
                if(item.is_null())
                {
                    m_S1UeInfo.push_back( S1UeInfo() );
                }
                else
                {
                    S1UeInfo newItem;
                    newItem.fromJson(item);
                    m_S1UeInfo.push_back( newItem );
                }
                
            }
    }
    
}


TimeStamp S1BearerInfo::getTimeStamp() const
{
    return m_TimeStamp;
}
void S1BearerInfo::setTimeStamp(TimeStamp const& value)
{
    m_TimeStamp = value;
    m_TimeStampIsSet = true;
}
bool S1BearerInfo::timeStampIsSet() const
{
    return m_TimeStampIsSet;
}
void S1BearerInfo::unsetTimeStamp()
{
    m_TimeStampIsSet = false;
}
std::vector<S1UeInfo>& S1BearerInfo::getS1UeInfo()
{
    return m_S1UeInfo;
}

}
}
}
}

