/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "S1BearerSubscriptionPost.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

S1BearerSubscriptionPost::S1BearerSubscriptionPost()
{
    m_CallbackReference = "";
    m_EventTypeIsSet = false;
    m_ExpiryDeadlineIsSet = false;
    
}

S1BearerSubscriptionPost::~S1BearerSubscriptionPost()
{
}

void S1BearerSubscriptionPost::validate()
{
    // TODO: implement validation
}

nlohmann::json S1BearerSubscriptionPost::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["callbackReference"] = ModelBase::toJson(m_CallbackReference);
    if(m_EventTypeIsSet)
    {
        val["eventType"] = ModelBase::toJson(m_EventType);
    }
    val["s1BearerSubscriptionCriteria"] = ModelBase::toJson(m_S1BearerSubscriptionCriteria);
    if(m_ExpiryDeadlineIsSet)
    {
        val["expiryDeadline"] = ModelBase::toJson(m_ExpiryDeadline);
    }
    

    return val;
}

void S1BearerSubscriptionPost::fromJson(const nlohmann::json& val)
{
    setCallbackReference(val.at("callbackReference"));
    if(val.find("eventType") != val.end())
    {
        if(!val["eventType"].is_null())
        {
            EventType newItem;
            newItem.fromJson(val["eventType"]);
            setEventType( newItem );
        }
        
    }
    if(val.find("expiryDeadline") != val.end())
    {
        if(!val["expiryDeadline"].is_null())
        {
            TimeStamp newItem;
            newItem.fromJson(val["expiryDeadline"]);
            setExpiryDeadline( newItem );
        }
        
    }
    
}


std::string S1BearerSubscriptionPost::getCallbackReference() const
{
    return m_CallbackReference;
}
void S1BearerSubscriptionPost::setCallbackReference(std::string const& value)
{
    m_CallbackReference = value;
    
}
EventType S1BearerSubscriptionPost::getEventType() const
{
    return m_EventType;
}
void S1BearerSubscriptionPost::setEventType(EventType const& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}
bool S1BearerSubscriptionPost::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}
void S1BearerSubscriptionPost::unsetEventType()
{
    m_EventTypeIsSet = false;
}
S1BearerSubscriptionCriteria S1BearerSubscriptionPost::getS1BearerSubscriptionCriteria() const
{
    return m_S1BearerSubscriptionCriteria;
}
void S1BearerSubscriptionPost::setS1BearerSubscriptionCriteria(S1BearerSubscriptionCriteria const& value)
{
    m_S1BearerSubscriptionCriteria = value;
    
}
TimeStamp S1BearerSubscriptionPost::getExpiryDeadline() const
{
    return m_ExpiryDeadline;
}
void S1BearerSubscriptionPost::setExpiryDeadline(TimeStamp const& value)
{
    m_ExpiryDeadline = value;
    m_ExpiryDeadlineIsSet = true;
}
bool S1BearerSubscriptionPost::expiryDeadlineIsSet() const
{
    return m_ExpiryDeadlineIsSet;
}
void S1BearerSubscriptionPost::unsetExpiryDeadline()
{
    m_ExpiryDeadlineIsSet = false;
}

}
}
}
}

