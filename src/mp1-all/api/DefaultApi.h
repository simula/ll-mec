/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "InlineObject.h"
#include "InlineObject1.h"
#include "InlineObject10.h"
#include "InlineObject11.h"
#include "InlineObject12.h"
#include "InlineObject13.h"
#include "InlineObject14.h"
#include "InlineObject15.h"
#include "InlineObject2.h"
#include "InlineObject3.h"
#include "InlineObject4.h"
#include "InlineObject5.h"
#include "InlineObject6.h"
#include "InlineObject7.h"
#include "InlineObject8.h"
#include "InlineObject9.h"
#include "InlineResponse200.h"
#include "InlineResponse2001.h"
#include "InlineResponse20010.h"
#include "InlineResponse2002.h"
#include "InlineResponse2003.h"
#include "InlineResponse2004.h"
#include "InlineResponse2005.h"
#include "InlineResponse2006.h"
#include "InlineResponse2007.h"
#include "InlineResponse2008.h"
#include "InlineResponse2009.h"
#include "InlineResponse201.h"
#include "InlineResponse2011.h"
#include "InlineResponse2012.h"
#include "InlineResponse2013.h"
#include "InlineResponse2014.h"
#include "InlineResponse2015.h"
#include "InlineResponse2016.h"
#include "InlineResponse2017.h"
#include "InlineResponse400.h"
#include "InlineResponse403.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  DefaultApi {
public:
    DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~DefaultApi() {}
    void init();

    const std::string base = "/rni/v1";

private:
    void setupRoutes();

    void ca_re_conf_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_report_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void plmn_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_cc_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_cr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_mr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_re_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_rm_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_rr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_s1_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_ta_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void ca_re_conf_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject14"></param>
    virtual void ca_re_conf_subscription_subscriptions_post(const Inline_object_14 &inlineObject14, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject15"></param>
    virtual void ca_re_conf_subscription_subscriptions_put(const std::string &subscriptionId, const Inline_object_15 &inlineObject15, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void ca_re_conf_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get cell change subscription information
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void cell_change_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to cell change notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject"></param>
    virtual void cell_change_subscriptions_post(const Inline_object &inlineObject, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to cell change notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject1"></param>
    virtual void cell_change_subscriptions_put(const std::string &subscriptionId, const Inline_object_1 &inlineObject1, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void cell_change_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject7"></param>
    virtual void meas_rep_ue_report_subscriptions_put(const std::string &subscriptionId, const Inline_object_7 &inlineObject7, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_rep_ue_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject6"></param>
    virtual void meas_rep_ue_subscriptions_post(const Inline_object_6 &inlineObject6, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_rep_ue_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets UE Timing Advance subscription information from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_ta_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to UE Timing Advance notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject4"></param>
    virtual void meas_ta_subscriptions_post(const Inline_object_4 &inlineObject4, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to UE Timing Advance notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject5"></param>
    virtual void meas_ta_subscriptions_put(const std::string &subscriptionId, const Inline_object_5 &inlineObject5, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_ta_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the information on Mobile Network(s) that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="appInsId">Application instance identifier</param>
    virtual void plmn_info_get(const Pistache::Optional<std::vector<std::string>> &appInsId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_est_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject8"></param>
    virtual void rab_est_subscription_subscriptions_post(const Inline_object_8 &inlineObject8, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject9"></param>
    virtual void rab_est_subscription_subscriptions_put(const std::string &subscriptionId, const Inline_object_9 &inlineObject9, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_est_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on existing E-RABs that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="appInsId">Application instance identifier (optional, default to &quot;&quot;)</param>
    /// <param name="cellId">E-UTRAN Cell Identity as a bit string (size (28)), as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv4Address">Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv6Address">Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="natedIpAddress">Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="gtpTeid">Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="erabId">E-RAB identifier (optional, default to 0)</param>
    /// <param name="qci">QoS Class Identifier as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabGbrDl">Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabGbrUl">Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabMbrDl">Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabMbrUl">Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    virtual void rab_info_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<int32_t> &erabId, const Pistache::Optional<int32_t> &qci, const Pistache::Optional<int32_t> &erabGbrDl, const Pistache::Optional<int32_t> &erabGbrUl, const Pistache::Optional<int32_t> &erabMbrDl, const Pistache::Optional<int32_t> &erabMbrUl, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_mod_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject10"></param>
    virtual void rab_mod_subscription_subscriptions_post(const Inline_object_10 &inlineObject10, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject11"></param>
    virtual void rab_mod_subscription_subscriptions_put(const std::string &subscriptionId, const Inline_object_11 &inlineObject11, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_mod_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_rel_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject12"></param>
    virtual void rab_rel_subscription_subscriptions_post(const Inline_object_12 &inlineObject12, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject13"></param>
    virtual void rab_rel_subscription_subscriptions_put(const std::string &subscriptionId, const Inline_object_13 &inlineObject13, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_rel_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on existing E-RABs that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="tempUeId">The temporary identifier allocated for the specific UE as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv4Address">Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv6Address">Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="natedIpAddress">Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="gtpTeid">Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="cellId">E-UTRAN Cell Identity as a bit string (size (28)), as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="erabId">E-RAB identifier (optional, default to std::vector&lt;int32_t&gt;())</param>
    virtual void s1_bearer_info_get(const Pistache::Optional<std::vector<std::string>> &tempUeId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<int32_t>> &erabId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void s1_bearer_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="inlineObject2"></param>
    virtual void s1_bearer_subscription_subscriptions_post(const Inline_object_2 &inlineObject2, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="inlineObject3"></param>
    virtual void s1_bearer_subscription_subscriptions_put(const std::string &subscriptionId, const Inline_object_3 &inlineObject3, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void s1_bearer_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the cell_change subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_cc_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the ca_reconf subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_cr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the meas_rep_ue subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_mr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_est subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_re_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_mod subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_rm_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_rel subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_rr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the s1_bearer subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_s1_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the ta subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_ta_get(Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* DefaultApi_H_ */

