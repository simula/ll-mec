/**
* MEC Platform
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "Inline_object.h"
#include "Inline_object_1.h"
#include "Mp1_traffic_imsi.h"
#include "Object.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  DefaultApi {
public:
    DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~DefaultApi() {}
    void init();

    const std::string base = "/api/v1";

private:
    void setupRoutes();

    void delete_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_platform_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for deactivating traffic redirection by name.  This function removes the respective entries by the MEC platform database, reconfigures the DNS server to stop resolving requests for the given name to the MEC application instance, and removes the related openflow rules. 
    /// </remarks>
    /// <param name="inlineObject1"></param>
    virtual void delete_mp1_traffic_all(const Inline_object_1 &inlineObject1, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for uninstalling traffic redirection by type.  Disable redirection by traffic type for the specified list of UEs. For now, the request body needs to carry the full information about the redirection rule. (Support for deleting a redirection rule by id is to be added.) 
    /// </remarks>
    /// <param name="mp1TrafficImsi"> (optional)</param>
    virtual void delete_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for installing traffic redirection by name.  This function reconfigures the DNS server operated by the MEC platform so that it resolves the given name to the IP address of a MEC server. Also, the necessary openflow rules for redirection will be installed.  Redirection applies to all UEs. 
    /// </remarks>
    /// <param name="inlineObject"></param>
    virtual void post_mp1_traffic_all(const Inline_object &inlineObject, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for activating traffic redirection by traffic type for a specific list of UEs.  This API endpoint allows a MEC application to request traffic redirection  for a list of UEs (identified by their IMSIs). The caller of this function needs to specify the IP address-port-protocol tuple that characterizes the service,  and the IP-MAC addresses of the MEC server (also the type of the service and the UE list).   If a UE is not already connected, the openflow rules will not be added at the time this function is called. Rather, they will be recorded in the database and when the SPGW will notify the MEC platform that the UE is attached, they will be  pushed to the OVS. If the UE is already connected, however, the redirection rules will be directly installed by this function. 
    /// </remarks>
    /// <param name="mp1TrafficImsi"> (optional)</param>
    virtual void post_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Reset the virtual switch.  First deletes all flows and then adds the default ones. In particular: * Default low priority rule for traffic originating from the LOCAL port of the switch, which is directed towards the Internet (or external networks) * Rules for communication (IP+ARP) between the local OVS host and the SGi * Rule for rewriting the dst MAC for packets coming from the UEs so that they reach the SGi (NAT box). 
    /// </remarks>
    virtual void post_platform(Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* DefaultApi_H_ */

