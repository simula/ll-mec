/**
* MEC Platform
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

DefaultApi::DefaultApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void DefaultApi::init() {
    setupRoutes();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/mp1/traffic/all", Routes::bind(&DefaultApi::delete_mp1_traffic_all_handler, this));
    Routes::Delete(*router, base + "/mp1/traffic/imsi", Routes::bind(&DefaultApi::delete_mp1_traffic_imsi_handler, this));
    Routes::Post(*router, base + "/mp1/traffic/all", Routes::bind(&DefaultApi::post_mp1_traffic_all_handler, this));
    Routes::Post(*router, base + "/mp1/traffic/imsi", Routes::bind(&DefaultApi::post_mp1_traffic_imsi_handler, this));
    Routes::Post(*router, base + "/platform", Routes::bind(&DefaultApi::post_platform_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::delete_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Inline_object_1 inlineObject1;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      inlineObject1.fromJson(request_body);
    
      this->delete_mp1_traffic_all(inlineObject1, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::delete_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1_traffic_imsi mp1TrafficImsi;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      mp1TrafficImsi.fromJson(request_body);
    
      this->delete_mp1_traffic_imsi(mp1TrafficImsi, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::post_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Inline_object inlineObject;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      inlineObject.fromJson(request_body);
    
      this->post_mp1_traffic_all(inlineObject, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::post_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1_traffic_imsi mp1TrafficImsi;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      mp1TrafficImsi.fromJson(request_body);
    
      this->post_mp1_traffic_imsi(mp1TrafficImsi, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::post_platform_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->post_platform(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

