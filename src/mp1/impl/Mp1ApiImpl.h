/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* Mp1ApiImpl.h
*
* 
*/

#ifndef MP1_API_IMPL_H_
#define MP1_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>

#include <Mp1Api.h>

#include <pistache/optional.h>

#include "CaReConfSubscription.h"
#include "CaReConfSubscriptionPost.h"
#include "CellChangeSubscription.h"
#include "CellChangeSubscriptionPost.h"
//#include "ImsiList.h"
#include "InlineResponse429.h"
#include "MeasRepUeSubscription.h"
#include "MeasRepUeSubscriptionPost.h"
#include "MeasTaSubscription.h"
#include "MeasTaSubscriptionPost.h"
#include "Mp1Traffic.h"
#include "Mp1TrafficImsi.h"
#include "PlmnInfo.h"
#include "ProblemDetails.h"
#include "RabEstSubscription.h"
#include "RabEstSubscriptionPost.h"
#include "RabInfo.h"
#include "RabModSubscription.h"
#include "RabModSubscriptionPost.h"
#include "RabRelSubscription.h"
#include "RabRelSubscriptionPost.h"
#include "S1BearerInfo.h"
#include "S1BearerSubscription.h"
#include "S1BearerSubscriptionPost.h"
#include "SubscriptionLinkList.h"
#include "rib.h"
#include <string>
#include "SubscriptionsApiImpl.h"
#include "json.h"
#include "subscription.h"

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::model;
using json = nlohmann::json;
static std::size_t callback(
        const char* in,
        std::size_t size,
        std::size_t num,
        std::string* out);
class Mp1ApiImpl : public llmec::mp1::api::Mp1Api {
public:
    Mp1ApiImpl(std::shared_ptr<Pistache::Rest::Router>,
               llmec::mp1::rib::Rib& rib,
               llmec::event::subscription &ev);
    ~Mp1ApiImpl() {}
    virtual void event_callback (std::string imsi, llmec::app::uplane::ueEventType evType) {}
    /*
     * Callback function for handling UE_EVENT_RAB_ESTABLISHMENT
     * @param [bs_ip] IP addr of the originating BS
     * @param [imsi] UE's imsi
     * @param [eRAB] UE's bearer
     */
    void handle_ue_rab_est(std::string bs_ip, std::string imsi, int erab);

    void ca_re_conf_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void ca_re_conf_subscription_subscriptions_post(const CaReConfSubscriptionPost &caReConfSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void ca_re_conf_subscription_subscriptions_put(const std::string &subscriptionId, const CaReConfSubscription &caReConfSubscription, Pistache::Http::ResponseWriter &response);
    void ca_re_conf_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void cell_change_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void cell_change_subscriptions_post(const CellChangeSubscriptionPost &cellChangeSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void cell_change_subscriptions_put(const std::string &subscriptionId, const CellChangeSubscription &cellChangeSubscription, Pistache::Http::ResponseWriter &response);
    void cell_change_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void delete_mp1_traffic_all(const Mp1Traffic &mp1Traffic, Pistache::Http::ResponseWriter &response);
    void delete_mp1_traffic_imsi(const Mp1TrafficImsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response);
    void meas_rep_ue_report_subscriptions_put(const std::string &subscriptionId, const MeasRepUeSubscription &measRepUeSubscription, Pistache::Http::ResponseWriter &response);
    void meas_rep_ue_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void meas_rep_ue_subscriptions_post(const MeasRepUeSubscriptionPost &measRepUeSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void meas_rep_ue_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void meas_ta_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void meas_ta_subscriptions_post(const MeasTaSubscriptionPost &measTaSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void meas_ta_subscriptions_put(const std::string &subscriptionId, const MeasTaSubscription &measTaSubscription, Pistache::Http::ResponseWriter &response);
    void meas_ta_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void plmn_info_get(const Pistache::Optional<std::vector<std::string>> &appInsId, Pistache::Http::ResponseWriter &response);
    void post_mp1_traffic_all(const Mp1Traffic &mp1Traffic, Pistache::Http::ResponseWriter &response);
    void post_mp1_traffic_imsi(const Mp1TrafficImsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response);
    void post_platform(Pistache::Http::ResponseWriter &response);
    void rab_est_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void rab_est_subscription_subscriptions_post(const RabEstSubscriptionPost &rabEstSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void rab_est_subscription_subscriptions_put(const std::string &subscriptionId, const RabEstSubscription &rabEstSubscription, Pistache::Http::ResponseWriter &response);
    void rab_est_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void rab_info_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<int32_t> &erabId, const Pistache::Optional<int32_t> &qci, const Pistache::Optional<int32_t> &erabGbrDl, const Pistache::Optional<int32_t> &erabGbrUl, const Pistache::Optional<int32_t> &erabMbrDl, const Pistache::Optional<int32_t> &erabMbrUl, Pistache::Http::ResponseWriter &response);
    void rab_mod_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void rab_mod_subscription_subscriptions_post(const RabModSubscriptionPost &rabModSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void rab_mod_subscription_subscriptions_put(const std::string &subscriptionId, const RabModSubscription &rabModSubscription, Pistache::Http::ResponseWriter &response);
    void rab_mod_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void rab_rel_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void rab_rel_subscription_subscriptions_post(const RabRelSubscriptionPost &rabRelSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void rab_rel_subscription_subscriptions_put(const std::string &subscriptionId, const RabRelSubscription &rabRelSubscription, Pistache::Http::ResponseWriter &response);
    void rab_rel_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void s1_bearer_info_get(const Pistache::Optional<std::vector<std::string>> &tempUeId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<int32_t>> &erabId, Pistache::Http::ResponseWriter &response);
    void s1_bearer_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void s1_bearer_subscription_subscriptions_post(const S1BearerSubscriptionPost &s1BearerSubscriptionPost, Pistache::Http::ResponseWriter &response);
    void s1_bearer_subscription_subscriptions_put(const std::string &subscriptionId, const S1BearerSubscription &s1BearerSubscription, Pistache::Http::ResponseWriter &response);
    void s1_bearer_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_cc_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_cr_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_mr_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_re_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_rm_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_rr_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_s1_get(Pistache::Http::ResponseWriter &response);
    void subscription_link_list_subscriptions_ta_get(Pistache::Http::ResponseWriter &response);


private:
    llmec::mp1::rib::Rib& m_rib;
    llmec::event::subscription& m_event_sub;

};

}
}
}



#endif
