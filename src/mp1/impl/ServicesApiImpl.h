/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* ServicesApiImpl.h
*
* 
*/

#ifndef SERVICES_API_IMPL_H_
#define SERVICES_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>

#include <ServicesApi.h>

#include <pistache/optional.h>
#include "ServiceInfo.h"
#include "ServiceInfo_Post.h"
#include "SubscriptionLinkList.h"
#include "rib.h"
#include <string>
#include "SubscriptionsApiImpl.h"
#include "json.h"
#include "subscription.h"


namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::model;
using json = nlohmann::json;

static std::size_t callback(
        const char* in,
        std::size_t size,
        std::size_t num,
        std::string* out);
class ServicesApiImpl : public llmec::mp1::api::ServicesApi {
public:
	ServicesApiImpl(std::shared_ptr<Pistache::Rest::Router>,
                  llmec::mp1::rib::Rib& rib,
                  llmec::event::subscription& ev);
    ~ServicesApiImpl() {}

    void services_get(const Pistache::Optional<std::vector<std::string>> &serInstanceId, const Pistache::Optional<std::vector<std::string>> &serName, const Pistache::Optional<std::string> &serCategoryId, Pistache::Http::ResponseWriter &response);
    void services_post(const ServiceInfo_Post &serviceInfoPost, Pistache::Http::ResponseWriter &response);
    void services_service_id_get(const std::string &serviceId, Pistache::Http::ResponseWriter &response);
    void services_service_id_put(const std::string &serviceId, const ServiceInfo &serviceInfo, Pistache::Http::ResponseWriter &response);


private:
    llmec::mp1::rib::Rib& m_rib;
    llmec::event::subscription& m_event_sub;

    /* Store service's events */
    std::unordered_map<int, std::vector<std::shared_ptr<SubscriptionsApiImpl>>> service_event_listeners_;

};

}
}
}



#endif
