/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI AND som additional MEC APIs
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApiImpl.h"
#include <fstream>
#include <curl/curl.h>
#include "spdlog.h"

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::model;
#define DEFAULT_RIB_FILE  "src/mp1/inputs/mp1.json"
#define FLEXRAN_CURL_TIMEOUT_MS 100L
DefaultApiImpl::DefaultApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr, llmec::mp1::rib::Rib& rib)
    : DefaultApi(rtr), m_rib(rib)
    { }

void DefaultApiImpl::event_callback (llmec::app::uplane::ueEventType evType){
	spdlog::get("ll-mec")->info("[MP1 API] EVENT:{} ", evType );
	//send notification to the corresponding Apps

}

void DefaultApiImpl::ca_re_conf_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::ca_re_conf_subscription_subscriptions_post(const CaReConfSubscriptionPost &caReConfSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::ca_re_conf_subscription_subscriptions_put(const std::string &subscriptionId, const CaReConfSubscription &caReConfSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::ca_re_conf_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::cell_change_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::cell_change_subscriptions_post(const CellChangeSubscriptionPost &cellChangeSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::cell_change_subscriptions_put(const std::string &subscriptionId, const CellChangeSubscription &cellChangeSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::cell_change_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::delete_mp1_traffic_all(const Mp1_traffic &mp1Traffic, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::delete_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_rep_ue_report_subscriptions_put(const std::string &subscriptionId, const MeasRepUeSubscription &measRepUeSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_rep_ue_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_rep_ue_subscriptions_post(const MeasRepUeSubscriptionPost &measRepUeSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_rep_ue_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_ta_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_ta_subscriptions_post(const MeasTaSubscriptionPost &measTaSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_ta_subscriptions_put(const std::string &subscriptionId, const MeasTaSubscription &measTaSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::meas_ta_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::plmn_info_get(const Pistache::Optional<std::vector<std::string>> &appInsId, Pistache::Http::ResponseWriter &response) {

	spdlog::get("ll-mec")->info("[MP1 API] Get PLMN info");

	if (appInsId.isEmpty()){
		spdlog::get("ll-mec")->debug("[MP1 API] AppInsId should be provided ");
		response.send(Pistache::Http::Code::Bad_Request, "[PLMN info] No information!\n");
	}

	//check whether AppInsId has permission to get PLMN info
	if (m_rib.getAppPermission(appInsId.get()[0], APP_PLMN_INFO)){
		json jsonData = m_rib.get_plmn_info(appInsId.get());

		//if information is available
		if (!jsonData.empty()){
			Plmn plmn;
			Ecgi ecgi;
			try{
				plmn.fromJson(jsonData);
				ecgi.setPlmn(plmn);
				ecgi.fromJson(jsonData);
			} catch (json::exception& e){
				std::cout << "message: " << e.what() << '\n'
						<< "exception id: " << e.id << std::endl;
				response.send(Pistache::Http::Code::Not_Found, "[PLMN info] No information!\n");
			}
			std::string resBody = "PLMN info ";
			spdlog::get("ll-mec")->debug("[MP1 API] Get PLMN info,  MNC: {} ", ecgi.getPlmn().getMnc());
			spdlog::get("ll-mec")->debug("[MP1 API] Get PLMN info, MCC: {} ", ecgi.getPlmn().getMcc());
			std::vector<std::string> m_CellId = ecgi.getCellId();
			for (const std::string& str: m_CellId){
				spdlog::get("ll-mec")->debug("[MP1 API] Get PLMN info, Cell ID: {} ", str);
				resBody += "CellId " + str;
			}
			resBody += " MNC " +  ecgi.getPlmn().getMnc() + ", MCC " +  ecgi.getPlmn().getMcc() + "\n";
			response.send(Pistache::Http::Code::Ok, resBody);

		} else{//if there's no information, send response with Not_Found code to the app
			spdlog::get("ll-mec")->debug("[MP1 API] No PLMN info available ");
			response.send(Pistache::Http::Code::Not_Found, "[PLMN info] No information!\n");
		}
	} else{
		spdlog::get("ll-mec")->debug("[MP1 API] Do not permission to get PLMN info ");
		response.send(Pistache::Http::Code::Unauthorized, "[PLMN info] not authorized to get this information!\n");
	}

}

void DefaultApiImpl::post_mp1_traffic_all(const Mp1_traffic &mp1Traffic, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::post_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::post_platform(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_est_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_est_subscription_subscriptions_post(const RabEstSubscriptionPost &rabEstSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_est_subscription_subscriptions_put(const std::string &subscriptionId, const RabEstSubscription &rabEstSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_est_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_info_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<int32_t> &erabId, const Pistache::Optional<int32_t> &qci, const Pistache::Optional<int32_t> &erabGbrDl, const Pistache::Optional<int32_t> &erabGbrUl, const Pistache::Optional<int32_t> &erabMbrDl, const Pistache::Optional<int32_t> &erabMbrUl, Pistache::Http::ResponseWriter &response) {

	spdlog::get("ll-mec")->info("[MP1 API] Get RAB info");
	std::vector<std::string> cellIdMp1;
	std::vector<std::string> ueIpv4AddressMp1;
	std::vector<std::string> ueIpv6AddressMp1;
	std::vector<std::string> natedIpAddressMp1;
    // Pistache::Optional<std::vector<std::string>> &gtpTeid
    // Pistache::Optional<int32_t> &erabId
	//Pistache::Optional<int32_t> &qci
	//Pistache::Optional<int32_t> &erabGbrDl
	//Pistache::Optional<int32_t> &erabGbrUl
	//Pistache::Optional<int32_t> &erabMbrDl
	//Pistache::Optional<int32_t> &erabMbrUl

	if (!appInsId.isEmpty()){
		spdlog::get("ll-mec")->info("[MP1 API] Get RAB info, appInsId {}", appInsId.get());
		response.send(Pistache::Http::Code::Bad_Request, "[RAB info] AppInsId should be provided!\n");
	}

	//check authentication
    if (!m_rib.getAppPermission(appInsId.get(), APP_RAB_INFO)){
    	spdlog::get("ll-mec")->debug("[MP1 API] Do not permission to get RAB info ");
    	response.send(Pistache::Http::Code::Unauthorized, "[RAB info] not authorized to get this information!\n");
    }


	if (!cellId.isEmpty()) {
		cellIdMp1= cellId.get();

	}
	for (auto it = cellIdMp1.begin(); it != cellIdMp1.end(); ++it){
		spdlog::get("ll-mec")->info("[MP1 API] Get RAB info CellId {}", *it);
	}


	//response
	/*
    RabInfo:
      type: object
      required:
        - appInsId
        - requestId
      properties:
        timeStamp:
        properties:
          seconds:
             type: integer
            format: uint32
            description: The seconds part of the time. Time is defined as Unix-time since
              January 1, 1970, 00:00:00 UTC
            example: 1577836800
          nanoSeconds:
            type: integer
            format: uint32
            description: The nanoseconds part of the time. Time is defined as Unix-time since
              January 1, 1970, 00:00:00 UTC
            example: 0
        appInsId:
          type: string
          format: string
          description: Unique identifier for the mobile edge application instance
          example: "01"
        requestId:
          RequestId:
          type: string
          format: string
          description: Unique identifier allocated by the Mobile Edge application for the Information request.
          example: "01"
        cellUserInfo:
          type: array
          items:
            $ref: "#/components/schemas/CellUserInfo"
		*/

	json jsonData ;

	//generate RequestId
	std::string requestId ="01";

	//TimeStamp


	auto mime = Pistache::Http::Mime::MediaType::fromString("application/json");
	auto m1 = MIME(Application, Json);

	//response.headers().add<Header::ContentType>(MIME(Application, Json));
	//response.send(Pistache::Http::Code::Ok, m1.toString());
	//response.headers().add<Pistache::Header::ContentType>(MIME(Application, Json));

  //  auto one_header = Header::ContentType(MIME(Application, Json));
  //  auto sec_header = Header::Accept(); //there should me constructor from MIME
  //  sec_header.parseRaw("application/json", sizeof("application/json"));
  /// response.header<Http::Header::ContentType>(one_header)
   //.header<Http::Header::Accept>(sec_header)
   //.send();

	  response.send(Pistache::Http::Code::Ok, "Do some magic\n");



}
void DefaultApiImpl::rab_mod_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_mod_subscription_subscriptions_post(const RabModSubscriptionPost &rabModSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_mod_subscription_subscriptions_put(const std::string &subscriptionId, const RabModSubscription &rabModSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_mod_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_rel_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_rel_subscription_subscriptions_post(const RabRelSubscriptionPost &rabRelSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_rel_subscription_subscriptions_put(const std::string &subscriptionId, const RabRelSubscription &rabRelSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::rab_rel_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::s1_bearer_info_get(const Pistache::Optional<std::vector<std::string>> &tempUeId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<int32_t>> &erabId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::s1_bearer_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::s1_bearer_subscription_subscriptions_post(const S1BearerSubscriptionPost &s1BearerSubscriptionPost, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::s1_bearer_subscription_subscriptions_put(const std::string &subscriptionId, const S1BearerSubscription &s1BearerSubscription, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::s1_bearer_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_cc_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_cr_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_mr_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_re_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_rm_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_rr_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_s1_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DefaultApiImpl::subscription_link_list_subscriptions_ta_get(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
}
}
}

