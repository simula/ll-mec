/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI AND som additional MEC APIs
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "CaReConfSubscription.h"
#include "CaReConfSubscriptionPost.h"
#include "CellChangeSubscription.h"
#include "CellChangeSubscriptionPost.h"
#include "ImsiList.h"
#include "InlineResponse429.h"
#include "MeasRepUeSubscription.h"
#include "MeasRepUeSubscriptionPost.h"
#include "MeasTaSubscription.h"
#include "MeasTaSubscriptionPost.h"
#include "Mp1Traffic.h"
#include "Mp1TrafficImsi.h"
#include "PlmnInfo.h"
#include "ProblemDetails.h"
#include "RabEstSubscription.h"
#include "RabEstSubscriptionPost.h"
#include "RabInfo.h"
#include "RabModSubscription.h"
#include "RabModSubscriptionPost.h"
#include "RabRelSubscription.h"
#include "RabRelSubscriptionPost.h"
#include "S1BearerInfo.h"
#include "S1BearerSubscription.h"
#include "S1BearerSubscriptionPost.h"
#include "SubscriptionLinkList.h"
#include <string>
#include <curl/curl.h>
#include "ue_event.h"

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::model;

class  DefaultApi {
public:
    DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~DefaultApi() {}
    void init();
    const std::string base = "/mp1/v1";
    virtual void event_callback (std::string imsi, llmec::app::uplane::ueEventType evType) = 0;

private:
    void setupRoutes();

    void ca_re_conf_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ca_re_conf_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cell_change_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_report_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_rep_ue_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void meas_ta_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void plmn_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_platform_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_est_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_mod_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void rab_rel_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void s1_bearer_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_cc_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_cr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_mr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_re_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_rm_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_rr_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_s1_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscription_link_list_subscriptions_ta_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);


    std::shared_ptr<Pistache::Rest::Router> router;



    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void ca_re_conf_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="caReConfSubscriptionPost">Use to creates a subscription to Carrier Aggregation Reconfiguration notifications based on the filter criteria</param>
    virtual void ca_re_conf_subscription_subscriptions_post(const CaReConfSubscriptionPost &caReConfSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to Carrier Aggregation Reconfiguration notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="caReConfSubscription">Use to creates a subscription to Carrier Aggregation Reconfiguration notifications based on the filter criteria</param>
    virtual void ca_re_conf_subscription_subscriptions_put(const std::string &subscriptionId, const CaReConfSubscription &caReConfSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void ca_re_conf_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get cell change subscription information
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void cell_change_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to cell change notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="cellChangeSubscriptionPost">Use to creates a subscription to cell change notifications based on the    filter criteria</param>
    virtual void cell_change_subscriptions_post(const CellChangeSubscriptionPost &cellChangeSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to cell change notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="cellChangeSubscription">Use to creates a subscription to cell change notifications based on the filter criteria</param>
    virtual void cell_change_subscriptions_put(const std::string &subscriptionId, const CellChangeSubscription &cellChangeSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void cell_change_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for deactivating traffic redirection by name.  This function removes the respective entries by the MEC platform database, reconfigures the DNS server to stop resolving requests for the given name to the MEC application instance, and removes the related openflow rules. 
    /// </remarks>
    /// <param name="mp1Traffic"></param>
    virtual void delete_mp1_traffic_all(const Mp1_traffic &mp1Traffic, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for uninstalling traffic redirection by type. Disable redirection by traffic type for the specified list of UEs. For now, the request body needs to carry the full information about the redirection rule. (Support for deleting a redirection rule by id is to be added.) 
    /// </remarks>
    /// <param name="mp1TrafficImsi"> (optional)</param>
    virtual void delete_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="measRepUeSubscription">Use to creates a subscription to UE measurement report notifications based on the filter criteria</param>
    virtual void meas_rep_ue_report_subscriptions_put(const std::string &subscriptionId, const MeasRepUeSubscription &measRepUeSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_rep_ue_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to UE measurement report notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="measRepUeSubscriptionPost">Use to creates a subscription to UE measurement report notifications based on the filter criteria</param>
    virtual void meas_rep_ue_subscriptions_post(const MeasRepUeSubscriptionPost &measRepUeSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_rep_ue_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets UE Timing Advance subscription information from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_ta_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to UE Timing Advance notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="measTaSubscriptionPost">Use to creates a subscription to UE Timing Advance notifications based on the filter criteria</param>
    virtual void meas_ta_subscriptions_post(const MeasTaSubscriptionPost &measTaSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to UE Timing Advance notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="measTaSubscription">Use to creates a subscription to UE Timing Advance notifications based on the filter criteria</param>
    virtual void meas_ta_subscriptions_put(const std::string &subscriptionId, const MeasTaSubscription &measTaSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void meas_ta_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets the information on Mobile Network(s) that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="appInsId">Application instance identifier</param>
    virtual void plmn_info_get(const Pistache::Optional<std::vector<std::string>> &appInsId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for installing traffic redirection by name.  This function reconfigures the DNS server operated by the MEC platform so that it resolves the given name to the IP address of a MEC server. Also, the necessary openflow rules for redirection will be installed.  Redirection applies to all UEs. 
    /// </remarks>
    /// <param name="mp1Traffic"></param>
    virtual void post_mp1_traffic_all(const Mp1_traffic &mp1Traffic, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Mp1 interface for activating traffic redirection by traffic type for a specific list of UEs.  This API endpoint allows a MEC application to request traffic redirection  for a list of UEs (identified by their IMSIs). The caller of this function needs to specify the IP address-port-protocol tuple that characterizes the service,  and the IP-MAC addresses of the MEC server (also the type of the service and the UE list).   If a UE is not already connected, the openflow rules will not be added at the time this function is called. Rather, they will be recorded in the database and when the SPGW will notify the MEC platform that the UE is attached, they will be  pushed to the OVS. If the UE is already connected, however, the redirection rules will be directly installed by this function. 
    /// </remarks>
    /// <param name="mp1TrafficImsi"> (optional)</param>
    virtual void post_mp1_traffic_imsi(const Mp1_traffic_imsi &mp1TrafficImsi, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Reset the virtual switch. First deletes all flows and then adds the default ones. In particular: * Default low priority rule for traffic originating from the LOCAL port of the switch, which is directed towards the Internet (or external networks) * Rules for communication (IP+ARP) between the local OVS host and the SGi * Rule for rewriting the dst MAC for packets coming from the UEs so that they reach the SGi (NAT box). 
    /// </remarks>
    virtual void post_platform(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_est_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="rabEstSubscriptionPost">Use to creates a subscription to RAB establishment notifications based on the filter criteria</param>
    virtual void rab_est_subscription_subscriptions_post(const RabEstSubscriptionPost &rabEstSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB establishment notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="rabEstSubscription">Use to creates a subscription to RAB establishment notifications based on the filter criteria</param>
    virtual void rab_est_subscription_subscriptions_put(const std::string &subscriptionId, const RabEstSubscription &rabEstSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_est_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on existing E-RABs that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="appInsId">Application instance identifier (optional, default to &quot;&quot;)</param>
    /// <param name="cellId">E-UTRAN Cell Identity as a bit string (size (28)), as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv4Address">Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv6Address">Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="natedIpAddress">Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="gtpTeid">Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="erabId">E-RAB identifier (optional, default to 0)</param>
    /// <param name="qci">QoS Class Identifier as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabGbrDl">Guaranteed downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabGbrUl">Guaranteed uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabMbrDl">Maximum downlink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    /// <param name="erabMbrUl">Maximum uplink E-RAB Bit Rate as defined in ETSI TS 123 401 (optional, default to 0)</param>
    virtual void rab_info_get(const Pistache::Optional<std::string> &appInsId, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<int32_t> &erabId, const Pistache::Optional<int32_t> &qci, const Pistache::Optional<int32_t> &erabGbrDl, const Pistache::Optional<int32_t> &erabGbrUl, const Pistache::Optional<int32_t> &erabMbrDl, const Pistache::Optional<int32_t> &erabMbrUl, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_mod_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="rabModSubscriptionPost">Use to creates a subscription to RAB Modification notifications based on the filter criteria</param>
    virtual void rab_mod_subscription_subscriptions_post(const RabModSubscriptionPost &rabModSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB Modification notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="rabModSubscription">Use to creates a subscription to RAB Modification notifications based on the filter criteria</param>
    virtual void rab_mod_subscription_subscriptions_put(const std::string &subscriptionId, const RabModSubscription &rabModSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_mod_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_rel_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="rabRelSubscriptionPost">Use to creates a subscription to RAB Release notifications based on the filter criteria</param>
    virtual void rab_rel_subscription_subscriptions_post(const RabRelSubscriptionPost &rabRelSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to RAB Release notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="rabRelSubscription">Use to creates a subscription to RAB Release notifications based on the filter criteria</param>
    virtual void rab_rel_subscription_subscriptions_put(const std::string &subscriptionId, const RabRelSubscription &rabRelSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void rab_rel_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets information on existing E-RABs that are associated with a specific mobile edge application instance
    /// </remarks>
    /// <param name="tempUeId">The temporary identifier allocated for the specific UE as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv4Address">Comma separated list of IE IPv4 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="ueIpv6Address">Comma separated list of IE IPv6 addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="natedIpAddress">Comma separated list of IE NATed IP addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="gtpTeid">Comma separated list of GTP TEID addresses as defined for the type for AssociateId (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="cellId">E-UTRAN Cell Identity as a bit string (size (28)), as defined in ETSI TS 136 413 (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="erabId">E-RAB identifier (optional, default to std::vector&lt;int32_t&gt;())</param>
    virtual void s1_bearer_info_get(const Pistache::Optional<std::vector<std::string>> &tempUeId, const Pistache::Optional<std::vector<std::string>> &ueIpv4Address, const Pistache::Optional<std::vector<std::string>> &ueIpv6Address, const Pistache::Optional<std::vector<std::string>> &natedIpAddress, const Pistache::Optional<std::vector<std::string>> &gtpTeid, const Pistache::Optional<std::vector<std::string>> &cellId, const Pistache::Optional<std::vector<int32_t>> &erabId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void s1_bearer_subscription_subscriptions_get(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="s1BearerSubscriptionPost">Use to creates a subscription to S1 Bearer notifications based on the filter criteria</param>
    virtual void s1_bearer_subscription_subscriptions_post(const S1BearerSubscriptionPost &s1BearerSubscriptionPost, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a subscription to S1 bearer notifications from Radio Network Information Service
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    /// <param name="s1BearerSubscription">Use to creates a subscription to S1 Bearer notifications based on the filter criteria</param>
    virtual void s1_bearer_subscription_subscriptions_put(const std::string &subscriptionId, const S1BearerSubscription &s1BearerSubscription, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Method to delete a subscription
    /// </remarks>
    /// <param name="subscriptionId">Subscription Id, specifically the \&quot;self\&quot; returned in the subscription request</param>
    virtual void s1_bearer_subscriptions_subscr_id_delete(const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the cell_change subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_cc_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the ca_reconf subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_cr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the meas_rep_ue subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_mr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_est subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_re_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_mod subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_rm_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the rab_rel subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_rr_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the s1_bearer subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_s1_get(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method can be used to request information about the ta subscriptions for this requestor
    /// </remarks>
    virtual void subscription_link_list_subscriptions_ta_get(Pistache::Http::ResponseWriter &response) = 0;


};

}
}
}

#endif /* DefaultApi_H_ */

