/**
* Mp1 API
* The ETSI MEC ISG MEC011 Application Enablement API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* Contact: cti_support@etsi.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SubscriptionsApi.h"
#include "Helpers.h"

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::helpers;
using namespace llmec::mp1::model;

SubscriptionsApi::SubscriptionsApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void SubscriptionsApi::init() {
    setupRoutes();
}

void SubscriptionsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/applications/:appInstanceId/subscriptions/:subscriptionType/:subscriptionId", Routes::bind(&SubscriptionsApi::applications_subscription_delete_handler, this));
    Routes::Get(*router, base + "/applications/:appInstanceId/subscriptions/:subscriptionType/:subscriptionId", Routes::bind(&SubscriptionsApi::applications_subscription_get_handler, this));
    Routes::Get(*router, base + "/applications/:appInstanceId/subscriptions", Routes::bind(&SubscriptionsApi::applications_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/applications/:appInstanceId/subscriptions", Routes::bind(&SubscriptionsApi::applications_subscriptions_post_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&SubscriptionsApi::subscriptions_api_default_handler, this));
}

void SubscriptionsApi::applications_subscription_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto appInstanceId = request.param(":appInstanceId").as<std::string>();
    auto subscriptionType = request.param(":subscriptionType").as<std::string>();
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->applications_subscription_delete(appInstanceId, subscriptionType, subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void SubscriptionsApi::applications_subscription_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto appInstanceId = request.param(":appInstanceId").as<std::string>();
    auto subscriptionType = request.param(":subscriptionType").as<std::string>();
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->applications_subscription_get(appInstanceId, subscriptionType, subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void SubscriptionsApi::applications_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto appInstanceId = request.param(":appInstanceId").as<std::string>();
    
    try {
      this->applications_subscriptions_get(appInstanceId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void SubscriptionsApi::applications_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto appInstanceId = request.param(":appInstanceId").as<std::string>();
    
    // Getting the body param
    NotificationSubscription body;
    
    try {
      nlohmann::json::parse(request.body()).get_to(body);
      if (body.getSubscriptionType() == "AppTerminationNotificationSubscription"){
    	  AppTerminationNotificationSubscription appTerminationNotificationSubscription;
    	  nlohmann::json::parse(request.body()).get_to(appTerminationNotificationSubscription);
    	  this->applications_subscriptions_post(appInstanceId, appTerminationNotificationSubscription, response);
      } else if (body.getSubscriptionType() == "SerAvailabilityNotificationSubscription"){
    	  SerAvailabilityNotificationSubscription serAvailabilityNotificationSubscription;
    	  nlohmann::json::parse(request.body()).get_to(serAvailabilityNotificationSubscription);
    	  this->applications_subscriptions_post(appInstanceId, serAvailabilityNotificationSubscription, response);
      }

    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void SubscriptionsApi::subscriptions_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}

