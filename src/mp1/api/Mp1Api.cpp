/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "Mp1Api.h"
#include "Helpers.h"
#include "spdlog.h"

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::helpers;
using namespace llmec::mp1::model;

Mp1Api::Mp1Api(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void Mp1Api::init() {
    setupRoutes();
}

void Mp1Api::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/rni/subscriptions/ca_reconf/:subscriptionId", Routes::bind(&Mp1Api::ca_re_conf_subscription_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/ca_reconf", Routes::bind(&Mp1Api::ca_re_conf_subscription_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/ca_reconf/:subscriptionId", Routes::bind(&Mp1Api::ca_re_conf_subscription_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/ca_reconf/:subscriptionId", Routes::bind(&Mp1Api::ca_re_conf_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/cell_change/:subscriptionId", Routes::bind(&Mp1Api::cell_change_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/cell_change", Routes::bind(&Mp1Api::cell_change_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/cell_change/:subscriptionId", Routes::bind(&Mp1Api::cell_change_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/cell_change/:subscriptionId", Routes::bind(&Mp1Api::cell_change_subscriptions_subscr_id_delete_handler, this));
    Routes::Delete(*router, base + "/mp1/traffic/all", Routes::bind(&Mp1Api::delete_mp1_traffic_all_handler, this));
    Routes::Delete(*router, base + "/mp1/traffic/imsi", Routes::bind(&Mp1Api::delete_mp1_traffic_imsi_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/meas_rep_ue/:subscriptionId", Routes::bind(&Mp1Api::meas_rep_ue_report_subscriptions_put_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/meas_rep_ue/:subscriptionId", Routes::bind(&Mp1Api::meas_rep_ue_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/meas_rep_ue", Routes::bind(&Mp1Api::meas_rep_ue_subscriptions_post_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/meas_rep_ue/:subscriptionId", Routes::bind(&Mp1Api::meas_rep_ue_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/ta/:subscriptionId", Routes::bind(&Mp1Api::meas_ta_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/ta", Routes::bind(&Mp1Api::meas_ta_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/ta/:subscriptionId", Routes::bind(&Mp1Api::meas_ta_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/ta/:subscriptionId", Routes::bind(&Mp1Api::meas_ta_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/queries/plmn_info", Routes::bind(&Mp1Api::plmn_info_get_handler, this));
    /**
     * @api {get} /rni/queries/plmn_info Get PLMN information
     * @apiName GetPLMNInfo
     * @apiGroup RNI
     * @apiDescription Gets the information on Mobile Network(s) (PLMN info) associated with a specific application instance 
     * @apiParam {String} app_ins_id ME application instance's ID.
     * @apiExample Example usage:
     *     curl -X GET http://127.0.0.1:8888/mp1/v1/rni/queries/plmn_info?app_ins_id=app01
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *
     *       {"appInId":"app01","ecgi":{"cellId":"0","plmn":{"mcc":"208","mnc":"93"}},"timeStamp":{"nanoSeconds":0,"seconds":1577836800}}
     *
     */

    Routes::Post(*router, base + "/mp1/traffic/all", Routes::bind(&Mp1Api::post_mp1_traffic_all_handler, this));
    Routes::Post(*router, base + "/mp1/traffic/imsi", Routes::bind(&Mp1Api::post_mp1_traffic_imsi_handler, this));
    Routes::Post(*router, base + "/platform", Routes::bind(&Mp1Api::post_platform_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/rab_est/:subscriptionId", Routes::bind(&Mp1Api::rab_est_subscription_subscriptions_get_handler, this));
    /**
     * @api {get} /rni/subscriptions/rab_est/:subscriptionId  Get information of a RabEst subscription
     * @apiName GetRabEstSubscription
     * @apiGroup RNI
     * @apiParam {String} subscriptionId ID of the RabEstSubscription.
     * @apiExample Example usage:
     *     curl -X GET http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *     {"_links":{"self":"http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01"},"callbackReference":"http://10.0.0.1:8888/mp1/v1/rni/notifications/rab_est/1","expiryDeadline":{"nanoSeconds":0,"seconds":15700},"filterCriteria":{"appInsId":"app01","associateId":{"type":"1","value":"10.0.0.1"},"cellId":["0x800000B"],"plmn":{"mcc":"001","mnc":"01"},"qci":1}}
     *
     */
    Routes::Post(*router, base + "/rni/subscriptions/rab_est", Routes::bind(&Mp1Api::rab_est_subscription_subscriptions_post_handler, this));
    /**
     * @api {post} /rni/subscriptions/rab_est  Create a subscription to RAB establishment notifications
     * @apiName SubscribeRabEstSubscription
     * @apiGroup RNI
     * @apiDescription Create a subscription to RAB establishment notifications from RNI Service
     * @apiParam {URI} callbackReference (required) URL selected by the ME application to receive notifications on the subscribed RNIS information.
     * @apiParam {Structure} filterCriteria (required) (FilterCriteriaAssocQci) List of filtering criteria for the subscription
     * @apiParam {Structure} _links List of hyperlinks related to the resource
     * @apiParam {TimeStamp} expiryDeadline Time stamp
     *
     * @apiExample Example usage:
     *     curl -X POST http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est -d '{"callbackReference":"http://10.0.0.1:8888/rni/v1/rni/notifications/rab_est/1","filterCriteriaAssocQci":{"appInsId": "app01", "associateId":{"type":"1", "value": "10.0.0.1"}, "plmn": {"mnc":"01", "mcc":"001"}, "cellId":"0x800000B", "qci":1}, "expiryDeadline":{"seconds":15700,"nanoSeconds":0 } }'
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *     {"_links":{"self":"http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01"},"callbackReference":"http://10.0.0.1:8888/mp1/v1/rni/notifications/rab_est/1","expiryDeadline":{"nanoSeconds":0,"seconds":15700},"filterCriteria":{"appInsId":"app01","associateId":{"type":"1","value":"10.0.0.1"},"cellId":["0x800000B"],"plmn":{"mcc":"001","mnc":"01"},"qci":1}}
     *
     */

    Routes::Put(*router, base + "/rni/subscriptions/rab_est/:subscriptionId", Routes::bind(&Mp1Api::rab_est_subscription_subscriptions_put_handler, this));
    /**
     * @api {put} /rni/subscriptions/rab_est:subscriptionId  Update a subscription to RAB establishment notifications
     * @apiName UpdateRabEstSubscription
     * @apiGroup RNI
     * @descripton Update a subscription to RAB establishment notifications from RNI Service
     * @apiParam {URI} callbackReference (required) URL selected by the ME application to receive notifications on the subscribed RNIS information.
     * @apiParam {Structure} filterCriteria (required) (FilterCriteriaAssocQci) List of filtering criteria for the subscription
     * @apiParam {Structure} _links List of hyperlinks related to the resource
     * @apiParam {TimeStamp} expiryDeadline Time stamp
     *
     * @apiExample Example usage:
     *     curl -X PUT http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01 -d '{"callbackReference":"http://10.0.0.1:8888/mp1/v1/rni/notifications/rab_est/2","filterCriteriaAssocQci":{"appInsId": "app01", "associateId":{"type":"1", "value": "10.10.10.1"}, "plmn": {"mnc":"01", "mcc":"001"}, "cellId":"0x800000B", "qci":1}, "expiryDeadline":{"seconds":15700,"nanoSeconds":0 } }'
     * @apiParam {String} subscriptionId ID of the subscription

     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *     {"_links":{"self":"http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01"},"callbackReference":"http://10.0.0.1:8888/mp1/v1/rni/notifications/rab_est/2","expiryDeadline":{"nanoSeconds":0,"seconds":15700},"filterCriteria":{}}
     *
     */
    Routes::Delete(*router, base + "/rni/subscriptions/rab_est/:subscriptionId", Routes::bind(&Mp1Api::rab_est_subscriptions_subscr_id_delete_handler, this));
    /**
     * @api {delete} /rni/subscriptions/rab_est/:subscriptionId  Delete a RabEst subscription
     * @apiName DeleteRabEstSubscription
     * @apiGroup RNI
     * @apiParam {String} subscriptionId ID of the RabEstSubscription to be deleted.
     * @apiExample Example usage:
     *     curl -X DELETE http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est/app01
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *
     */
    Routes::Get(*router, base + "/rni/queries/rab_info", Routes::bind(&Mp1Api::rab_info_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/rab_mod/:subscriptionId", Routes::bind(&Mp1Api::rab_mod_subscription_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/rab_mod", Routes::bind(&Mp1Api::rab_mod_subscription_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/rab_mod/:subscriptionId", Routes::bind(&Mp1Api::rab_mod_subscription_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/rab_mod/:subscriptionId", Routes::bind(&Mp1Api::rab_mod_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/rab_rel/:subscriptionId", Routes::bind(&Mp1Api::rab_rel_subscription_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/rab_rel", Routes::bind(&Mp1Api::rab_rel_subscription_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/rab_rel/:subscriptionId", Routes::bind(&Mp1Api::rab_rel_subscription_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/rab_rel/:subscriptionId", Routes::bind(&Mp1Api::rab_rel_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/queries/s1_bearer_info", Routes::bind(&Mp1Api::s1_bearer_info_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/s1_bearer/:subscriptionId", Routes::bind(&Mp1Api::s1_bearer_subscription_subscriptions_get_handler, this));
    Routes::Post(*router, base + "/rni/subscriptions/s1_bearer", Routes::bind(&Mp1Api::s1_bearer_subscription_subscriptions_post_handler, this));
    Routes::Put(*router, base + "/rni/subscriptions/s1_bearer/:subscriptionId", Routes::bind(&Mp1Api::s1_bearer_subscription_subscriptions_put_handler, this));
    Routes::Delete(*router, base + "/rni/subscriptions/s1_bearer/:subscriptionId", Routes::bind(&Mp1Api::s1_bearer_subscriptions_subscr_id_delete_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/cell_change", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_cc_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/ca_reconf", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_cr_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/meas_rep_ue", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_mr_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/rab_est", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_re_get_handler, this));
    /**
     * @api {get} /rni/subscriptions/rab_est/  Get a list of subscriptions for RabEstSubscription
     * @apiName GetRabEstSubscriptions
     * @apiGroup RNI
     * @apiExample Example usage:
     *     curl -X GET http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *     {"links":"http://127.0.0.1:8888/mp1/v1/rni/subscriptions/rab_est","subscription":[{"SubscriptionType":1,"href":"http://10.0.0.1:8888/mp1/v1/rni/notifications/rab_est/2"}]}
     *
     */
    Routes::Get(*router, base + "/rni/subscriptions/rab_mod", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_rm_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/rab_rel", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_rr_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/s1_bearer", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_s1_get_handler, this));
    Routes::Get(*router, base + "/rni/subscriptions/ta", Routes::bind(&Mp1Api::subscription_link_list_subscriptions_ta_get_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&Mp1Api::mp1_api_default_handler, this));
}

void Mp1Api::ca_re_conf_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->ca_re_conf_subscription_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::ca_re_conf_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    CaReConfSubscriptionPost caReConfSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(caReConfSubscriptionPost);
      this->ca_re_conf_subscription_subscriptions_post(caReConfSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::ca_re_conf_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    CaReConfSubscription caReConfSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(caReConfSubscription);
      this->ca_re_conf_subscription_subscriptions_put(subscriptionId, caReConfSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::ca_re_conf_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->ca_re_conf_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::cell_change_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->cell_change_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::cell_change_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    CellChangeSubscriptionPost cellChangeSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(cellChangeSubscriptionPost);
      this->cell_change_subscriptions_post(cellChangeSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::cell_change_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    CellChangeSubscription cellChangeSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(cellChangeSubscription);
      this->cell_change_subscriptions_put(subscriptionId, cellChangeSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::cell_change_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->cell_change_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::delete_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1Traffic mp1Traffic;
    
    try {
      nlohmann::json::parse(request.body()).get_to(mp1Traffic);
      this->delete_mp1_traffic_all(mp1Traffic, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::delete_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1TrafficImsi mp1TrafficImsi;
    
    try {
      nlohmann::json::parse(request.body()).get_to(mp1TrafficImsi);
      this->delete_mp1_traffic_imsi(mp1TrafficImsi, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_rep_ue_report_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    MeasRepUeSubscription measRepUeSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(measRepUeSubscription);
      this->meas_rep_ue_report_subscriptions_put(subscriptionId, measRepUeSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_rep_ue_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->meas_rep_ue_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_rep_ue_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    MeasRepUeSubscriptionPost measRepUeSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(measRepUeSubscriptionPost);
      this->meas_rep_ue_subscriptions_post(measRepUeSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_rep_ue_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->meas_rep_ue_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_ta_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->meas_ta_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_ta_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    MeasTaSubscriptionPost measTaSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(measTaSubscriptionPost);
      this->meas_ta_subscriptions_post(measTaSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_ta_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    MeasTaSubscription measTaSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(measTaSubscription);
      this->meas_ta_subscriptions_put(subscriptionId, measTaSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::meas_ta_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->meas_ta_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::plmn_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto appInsIdQuery = request.query().get("app_ins_id");
    Pistache::Optional<std::vector<std::string>> appInsId;
    if(!appInsIdQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(appInsIdQuery.get(), value)){
            appInsId = Pistache::Some(value);
        }
        for (const std::string& appId: value)
        	std::cout << "appInsId: "<< appId << std::endl;
    }
    
    try {
      this->plmn_info_get(appInsId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::post_mp1_traffic_all_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1Traffic mp1Traffic;
    
    try {
      nlohmann::json::parse(request.body()).get_to(mp1Traffic);
      this->post_mp1_traffic_all(mp1Traffic, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::post_mp1_traffic_imsi_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    Mp1TrafficImsi mp1TrafficImsi;
    
    try {
      nlohmann::json::parse(request.body()).get_to(mp1TrafficImsi);
      this->post_mp1_traffic_imsi(mp1TrafficImsi, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::post_platform_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->post_platform(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_est_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_est_subscription_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_est_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RabEstSubscriptionPost rabEstSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabEstSubscriptionPost);
      this->rab_est_subscription_subscriptions_post(rabEstSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_est_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    RabEstSubscription rabEstSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabEstSubscription);
      this->rab_est_subscription_subscriptions_put(subscriptionId, rabEstSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_est_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_est_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto appInsIdQuery = request.query().get("app_ins_id");
    Pistache::Optional<std::string> appInsId;
    if(!appInsIdQuery.isEmpty()){
        std::string value;
        if(fromStringValue(appInsIdQuery.get(), value)){
            appInsId = Pistache::Some(value);
        }
    }
    auto cellIdQuery = request.query().get("cell_id");
    Pistache::Optional<std::vector<std::string>> cellId;
    if(!cellIdQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(cellIdQuery.get(), value)){
            cellId = Pistache::Some(value);
        }
    }
    auto ueIpv4AddressQuery = request.query().get("ue_ipv4_address");
    Pistache::Optional<std::vector<std::string>> ueIpv4Address;
    if(!ueIpv4AddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(ueIpv4AddressQuery.get(), value)){
            ueIpv4Address = Pistache::Some(value);
        }
    }
    auto ueIpv6AddressQuery = request.query().get("ue_ipv6_address");
    Pistache::Optional<std::vector<std::string>> ueIpv6Address;
    if(!ueIpv6AddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(ueIpv6AddressQuery.get(), value)){
            ueIpv6Address = Pistache::Some(value);
        }
    }
    auto natedIpAddressQuery = request.query().get("nated_ip_address");
    Pistache::Optional<std::vector<std::string>> natedIpAddress;
    if(!natedIpAddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(natedIpAddressQuery.get(), value)){
            natedIpAddress = Pistache::Some(value);
        }
    }
    auto gtpTeidQuery = request.query().get("gtp_teid");
    Pistache::Optional<std::vector<std::string>> gtpTeid;
    if(!gtpTeidQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(gtpTeidQuery.get(), value)){
            gtpTeid = Pistache::Some(value);
        }
    }
    auto erabIdQuery = request.query().get("erab_id");
    Pistache::Optional<int32_t> erabId;
    if(!erabIdQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(erabIdQuery.get(), value)){
            erabId = Pistache::Some(value);
        }
    }
    auto qciQuery = request.query().get("qci");
    Pistache::Optional<int32_t> qci;
    if(!qciQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(qciQuery.get(), value)){
            qci = Pistache::Some(value);
        }
    }
    auto erabGbrDlQuery = request.query().get("erab_gbr_dl");
    Pistache::Optional<int32_t> erabGbrDl;
    if(!erabGbrDlQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(erabGbrDlQuery.get(), value)){
            erabGbrDl = Pistache::Some(value);
        }
    }
    auto erabGbrUlQuery = request.query().get("erab_gbr_ul");
    Pistache::Optional<int32_t> erabGbrUl;
    if(!erabGbrUlQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(erabGbrUlQuery.get(), value)){
            erabGbrUl = Pistache::Some(value);
        }
    }
    auto erabMbrDlQuery = request.query().get("erab_mbr_dl");
    Pistache::Optional<int32_t> erabMbrDl;
    if(!erabMbrDlQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(erabMbrDlQuery.get(), value)){
            erabMbrDl = Pistache::Some(value);
        }
    }
    auto erabMbrUlQuery = request.query().get("erab_mbr_ul");
    Pistache::Optional<int32_t> erabMbrUl;
    if(!erabMbrUlQuery.isEmpty()){
        int32_t value;
        if(fromStringValue(erabMbrUlQuery.get(), value)){
            erabMbrUl = Pistache::Some(value);
        }
    }
    
    try {
      this->rab_info_get(appInsId, cellId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, erabId, qci, erabGbrDl, erabGbrUl, erabMbrDl, erabMbrUl, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_mod_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_mod_subscription_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_mod_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RabModSubscriptionPost rabModSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabModSubscriptionPost);
      this->rab_mod_subscription_subscriptions_post(rabModSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_mod_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    RabModSubscription rabModSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabModSubscription);
      this->rab_mod_subscription_subscriptions_put(subscriptionId, rabModSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_mod_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_mod_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_rel_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_rel_subscription_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_rel_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RabRelSubscriptionPost rabRelSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabRelSubscriptionPost);
      this->rab_rel_subscription_subscriptions_post(rabRelSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_rel_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    RabRelSubscription rabRelSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(rabRelSubscription);
      this->rab_rel_subscription_subscriptions_put(subscriptionId, rabRelSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::rab_rel_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->rab_rel_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::s1_bearer_info_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto tempUeIdQuery = request.query().get("temp_ue_id");
    Pistache::Optional<std::vector<std::string>> tempUeId;
    if(!tempUeIdQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(tempUeIdQuery.get(), value)){
            tempUeId = Pistache::Some(value);
        }
    }
    auto ueIpv4AddressQuery = request.query().get("ue_ipv4_address");
    Pistache::Optional<std::vector<std::string>> ueIpv4Address;
    if(!ueIpv4AddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(ueIpv4AddressQuery.get(), value)){
            ueIpv4Address = Pistache::Some(value);
        }
    }
    auto ueIpv6AddressQuery = request.query().get("ue_ipv6_address");
    Pistache::Optional<std::vector<std::string>> ueIpv6Address;
    if(!ueIpv6AddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(ueIpv6AddressQuery.get(), value)){
            ueIpv6Address = Pistache::Some(value);
        }
    }
    auto natedIpAddressQuery = request.query().get("nated_ip_address");
    Pistache::Optional<std::vector<std::string>> natedIpAddress;
    if(!natedIpAddressQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(natedIpAddressQuery.get(), value)){
            natedIpAddress = Pistache::Some(value);
        }
    }
    auto gtpTeidQuery = request.query().get("gtp_teid");
    Pistache::Optional<std::vector<std::string>> gtpTeid;
    if(!gtpTeidQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(gtpTeidQuery.get(), value)){
            gtpTeid = Pistache::Some(value);
        }
    }
    auto cellIdQuery = request.query().get("cell_id");
    Pistache::Optional<std::vector<std::string>> cellId;
    if(!cellIdQuery.isEmpty()){
        std::vector<std::string> value;
        if(fromStringValue(cellIdQuery.get(), value)){
            cellId = Pistache::Some(value);
        }
    }
    auto erabIdQuery = request.query().get("erab_id");
    Pistache::Optional<std::vector<int32_t>> erabId;
    if(!erabIdQuery.isEmpty()){
        std::vector<int32_t> value;
        if(fromStringValue(erabIdQuery.get(), value)){
            erabId = Pistache::Some(value);
        }
    }
    
    try {
      this->s1_bearer_info_get(tempUeId, ueIpv4Address, ueIpv6Address, natedIpAddress, gtpTeid, cellId, erabId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::s1_bearer_subscription_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->s1_bearer_subscription_subscriptions_get(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::s1_bearer_subscription_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    S1BearerSubscriptionPost s1BearerSubscriptionPost;
    
    try {
      nlohmann::json::parse(request.body()).get_to(s1BearerSubscriptionPost);
      this->s1_bearer_subscription_subscriptions_post(s1BearerSubscriptionPost, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::s1_bearer_subscription_subscriptions_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    // Getting the body param
    
    S1BearerSubscription s1BearerSubscription;
    
    try {
      nlohmann::json::parse(request.body()).get_to(s1BearerSubscription);
      this->s1_bearer_subscription_subscriptions_put(subscriptionId, s1BearerSubscription, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::s1_bearer_subscriptions_subscr_id_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->s1_bearer_subscriptions_subscr_id_delete(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void Mp1Api::subscription_link_list_subscriptions_cc_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_cc_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_cr_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_cr_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_mr_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_mr_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_re_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_re_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_rm_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_rm_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_rr_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_rr_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_s1_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_s1_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void Mp1Api::subscription_link_list_subscriptions_ta_get_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

    try {
      this->subscription_link_list_subscriptions_ta_get(response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void Mp1Api::mp1_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}

