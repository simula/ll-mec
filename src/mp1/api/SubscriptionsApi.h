/**
* Mp1 API
* The ETSI MEC ISG MEC011 Application Enablement API described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* Contact: cti_support@etsi.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SubscriptionsApi.h
 *
 * 
 */

#ifndef SubscriptionsApi_H_
#define SubscriptionsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "Mp1SubscriptionLinkList.h"
#include "ProblemDetails.h"
#include "SerAvailabilityNotificationSubscription.h"
#include "AppTerminationNotificationSubscription.h"
#include "NotificationSubscription.h"
#include <string>

namespace llmec {
namespace mp1 {
namespace api {

using namespace llmec::mp1::model;

class  SubscriptionsApi {
public:
    SubscriptionsApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~SubscriptionsApi() {}
    void init();

    const std::string base = "/mp1/v1";

private:
    void setupRoutes();

    void applications_subscription_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void applications_subscription_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void applications_subscriptions_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void applications_subscriptions_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void subscriptions_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes a meMp1Subscription. This method is typically used in \&quot;Unsubscribing from service availability event notifications\&quot; procedure.
    /// </remarks>
    /// <param name="appInstanceId">Represents a mobile edge application instance. Note that the appInstanceId is allocated by the mobile edge platform manager.</param>
    /// <param name="subscriptionType">Represents a subscription type to the notifications from the mobile edge platform.</param>
    /// <param name="subscriptionId">Represents a subscription to the notifications from the mobile edge platform.</param>
    virtual void applications_subscription_delete(const std::string &appInstanceId, const std::string &subscriptionType, const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method requests information about a subscription for this requestor. Upon success, the response contains entity body with the subscription for the requestor.
    /// </remarks>
    /// <param name="appInstanceId">Represents a mobile edge application instance. Note that the appInstanceId is allocated by the mobile edge platform manager.</param>
    /// <param name="subscriptionType">Represents a subscription type to the notifications from the mobile edge platform.</param>
    /// <param name="subscriptionId">Represents a subscription to the notifications from the mobile edge platform.</param>
    virtual void applications_subscription_get(const std::string &appInstanceId, const std::string &subscriptionType, const std::string &subscriptionId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The GET method may be used to request information about all subscriptions for this requestor. Upon success, the response contains entity body with all the subscriptions for the requestor.
    /// </remarks>
    /// <param name="appInstanceId">Represents a mobile edge application instance. Note that the appInstanceId is allocated by the mobile edge platform manager.</param>
    virtual void applications_subscriptions_get(const std::string &appInstanceId, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// The POST method may be used to create a new subscription. One example use case is to create a new subscription to the mobile edge service availability notifications. Upon success, the response contains entity body describing the created subscription.
    /// </remarks>
    /// <param name="appInstanceId">Represents a mobile edge application instance. Note that the appInstanceId is allocated by the mobile edge platform manager.</param>
    /// <param name="body">Entity body in the request contains a subscription to the mobile edge application termination notifications that is to be created.</param>
    virtual void applications_subscriptions_post(const std::string &appInstanceId, const NotificationSubscription &body, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}

#endif /* SubscriptionsApi_H_ */

