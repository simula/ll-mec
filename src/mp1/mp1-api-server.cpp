/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "pistache/endpoint.h"
#include "pistache/http.h"
#include "pistache/router.h"
#ifdef __linux__
#include <vector>
#include <signal.h>
#include <unistd.h>
#endif

#include "mp1-api-server.h"
#include "spdlog.h"

#ifdef __linux__
void sigHandler(int sig){
    switch(sig){
        case SIGINT:
        case SIGQUIT:
        case SIGTERM:
        case SIGHUP:
        default:
            break;
    }
    exit(0);
}

void setUpUnixSignals(std::vector<int> quitSignals) {
    sigset_t blocking_mask;
    sigemptyset(&blocking_mask);
    for (auto sig : quitSignals)
        sigaddset(&blocking_mask, sig);

    struct sigaction sa;
    sa.sa_handler = sigHandler;
    sa.sa_mask    = blocking_mask;
    sa.sa_flags   = 0;

    for (auto sig : quitSignals)
        sigaction(sig, &sa, nullptr);
}
#endif

using namespace llmec::mp1::api;

void Mp1Manager::init(size_t thr) {
	auto opts = Pistache::Http::Endpoint::options()
	.threads(thr);
	m_httpEndpoint->init(opts);
	m_mp1Apiserver->init();
	m_subscriptionsApiserver->init();
	m_servicesApiserver->init();
	m_servicesApiserver->register_for_event(m_subscriptionsApiserver,llmec::mp1::rib::meMp1SubscriptionType::ME_MP1_SUBSCRIPTION_SERVICE_AVAILABILITY);
	//m_mp1Apiserver->register_for_event(m_subscriptionsApiserver,llmec::mp1::rib::meMp1SubscriptionType::ME_MP1_SUBSCRIPTION_APPLICATION_TERMINATION);
}
void Mp1Manager::start(){
	m_httpEndpoint->setHandler(m_router->handler());
	m_httpEndpoint->serve();

}
void Mp1Manager::shutdown(){
	m_httpEndpoint->shutdown();
}

std::shared_ptr<Mp1ApiImpl> Mp1Manager::getMp1ApiServer(){
	std::shared_ptr<Mp1ApiImpl> mp1_instance = std::dynamic_pointer_cast<Mp1ApiImpl> (m_mp1Apiserver);
	//spdlog::get("ll-mec")->info("[MP1 Manager] number of defaultApiServer's instances:{} ", m_mp1Apiserver.use_count());
	//return m_mp1Apiserver;
	return mp1_instance;
}
