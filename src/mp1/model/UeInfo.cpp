/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI AND som additional MEC APIs
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UeInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeInfo::UeInfo()
{
    m_AssociateIdIsSet = false;
    
}

UeInfo::~UeInfo()
{
}

void UeInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json UeInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( const auto& item : m_AssociateId )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["associateId"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_ErabInfo )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["erabInfo"] = jsonArray;
        
    }
    

    return val;
}

void UeInfo::fromJson(const nlohmann::json& val)
{
    {
        m_AssociateId.clear();
        if(val.find("associateId") != val.end())
        {
            for( const auto& item : val["associateId"] )
            {
                
                if(item.is_null())
                {
                    m_AssociateId.push_back( AssociateId() );
                }
                else
                {
                    AssociateId newItem;
                    newItem.fromJson(item);
                    m_AssociateId.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_ErabInfo.clear();
                    for( const auto& item : val["erabInfo"] )
            {
                
                if(item.is_null())
                {
                    m_ErabInfo.push_back( ErabQosParameters() );
                }
                else
                {
                    ErabQosParameters newItem;
                    newItem.fromJson(item);
                    m_ErabInfo.push_back( newItem );
                }
                
            }
    }
    
}


std::vector<AssociateId>& UeInfo::getAssociateId()
{
    return m_AssociateId;
}
bool UeInfo::associateIdIsSet() const
{
    return m_AssociateIdIsSet;
}
void UeInfo::unsetAssociateId()
{
    m_AssociateIdIsSet = false;
}
std::vector<ErabQosParameters>& UeInfo::getErabInfo()
{
    return m_ErabInfo;
}

}
}
}
}

