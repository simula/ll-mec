/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ServiceInfo.h
 *
 * This type represents the general information of a mobile edge service.
 */

#ifndef ServiceInfo_H_
#define ServiceInfo_H_


#include "TransportInfo.h"
#include "CategoryRef.h"
#include "ServiceInfo_State.h"
#include <string>
#include "SerializerTypes.h"
#include "json.h"


namespace llmec {
namespace mp1 {
namespace model {

/// <summary>
/// This type represents the general information of a mobile edge service.
/// </summary>
class  ServiceInfo
{
public:
    ServiceInfo();
    virtual ~ServiceInfo();

    void validate();

    /////////////////////////////////////////////
    /// ServiceInfo members

    /// <summary>
    /// Identifier of the service instance assigned by the MEPM / mobile edge platform.
    /// </summary>
    std::string getSerInstanceId() const;
    void setSerInstanceId(std::string const& value);
    bool serInstanceIdIsSet() const;
    void unsetSerInstanceId();
    /// <summary>
    /// The name of the service. This is how the service producing mobile edge application identifies the service instance it produces.
    /// </summary>
    std::string getSerName() const;
    void setSerName(std::string const& value);
        /// <summary>
    /// 
    /// </summary>
    CategoryRef getSerCategory() const;
    void setSerCategory(CategoryRef const& value);
    bool serCategoryIsSet() const;
    void unsetSerCategory();
    /// <summary>
    /// Service version
    /// </summary>
    std::string getVersion() const;
    void setVersion(std::string const& value);
        /// <summary>
    /// 
    /// </summary>
    ServiceInfo_State getState() const;
    void setState(ServiceInfo_State const& value);
        /// <summary>
    /// 
    /// </summary>
    TransportInfo getTransportInfo() const;
    void setTransportInfo(TransportInfo const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getSerializer() const;
    void setSerializer(std::string const& value);
    
    friend void to_json(nlohmann::json& j, const ServiceInfo& o);
    friend void from_json(const nlohmann::json& j, ServiceInfo& o);
protected:
    std::string m_SerInstanceId;
    bool m_SerInstanceIdIsSet;
    std::string m_SerName;

    CategoryRef m_SerCategory;
    bool m_SerCategoryIsSet;
    std::string m_Version;

    ServiceInfo_State m_State;

    TransportInfo m_TransportInfo;

   //SerializerTypes m_Serializer;
    std::string m_Serializer;

};

}
}
}

#endif /* ServiceInfo_H_ */
