/**
* RNI API
* The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI AND som additional MEC APIs
*
* OpenAPI spec version: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RabInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RabInfo::RabInfo()
{
    m_TimeStampIsSet = false;
    m_AppInsId = "";
    m_RequestId = "";
    m_CellUserInfoIsSet = false;
    
}

RabInfo::~RabInfo()
{
}

void RabInfo::validate()
{
    // TODO: implement validation
}

nlohmann::json RabInfo::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_TimeStampIsSet)
    {
        val["timeStamp"] = ModelBase::toJson(m_TimeStamp);
    }
    val["appInsId"] = ModelBase::toJson(m_AppInsId);
    val["requestId"] = ModelBase::toJson(m_RequestId);
    {
        nlohmann::json jsonArray;
        for( const auto& item : m_CellUserInfo )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["cellUserInfo"] = jsonArray;
        } 
    }
    

    return val;
}

void RabInfo::fromJson(const nlohmann::json& val)
{
    if(val.find("timeStamp") != val.end())
    {
        if(!val["timeStamp"].is_null())
        {
            TimeStamp newItem;
            newItem.fromJson(val["timeStamp"]);
            setTimeStamp( newItem );
        }
        
    }
    setAppInsId(val.at("appInsId"));
    setRequestId(val.at("requestId"));
    {
        m_CellUserInfo.clear();
        if(val.find("cellUserInfo") != val.end())
        {
            for( const auto& item : val["cellUserInfo"] )
            {
                
                if(item.is_null())
                {
                    m_CellUserInfo.push_back( CellUserInfo() );
                }
                else
                {
                    CellUserInfo newItem;
                    newItem.fromJson(item);
                    m_CellUserInfo.push_back( newItem );
                }
                
            }
        }
    }
    
}


TimeStamp RabInfo::getTimeStamp() const
{
    return m_TimeStamp;
}
void RabInfo::setTimeStamp(TimeStamp const& value)
{
    m_TimeStamp = value;
    m_TimeStampIsSet = true;
}
bool RabInfo::timeStampIsSet() const
{
    return m_TimeStampIsSet;
}
void RabInfo::unsetTimeStamp()
{
    m_TimeStampIsSet = false;
}
std::string RabInfo::getAppInsId() const
{
    return m_AppInsId;
}
void RabInfo::setAppInsId(std::string const& value)
{
    m_AppInsId = value;
    
}
std::string RabInfo::getRequestId() const
{
    return m_RequestId;
}
void RabInfo::setRequestId(std::string const& value)
{
    m_RequestId = value;
    
}
std::vector<CellUserInfo>& RabInfo::getCellUserInfo()
{
    return m_CellUserInfo;
}
bool RabInfo::cellUserInfoIsSet() const
{
    return m_CellUserInfoIsSet;
}
void RabInfo::unsetCellUserInfo()
{
    m_CellUserInfoIsSet = false;
}

}
}
}
}

