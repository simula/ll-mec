/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "S1BearerSubscriptionPost.h"

namespace llmec {
namespace mp1 {
namespace model {

S1BearerSubscriptionPost::S1BearerSubscriptionPost()
{
    m_CallbackReference = "";
    m_EventTypeIsSet = false;
    m_ExpiryDeadlineIsSet = false;
    
}

S1BearerSubscriptionPost::~S1BearerSubscriptionPost()
{
}

void S1BearerSubscriptionPost::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const S1BearerSubscriptionPost& o)
{
    j = nlohmann::json();
    j["callbackReference"] = o.m_CallbackReference;
    if(o.eventTypeIsSet())
        j["eventType"] = o.m_EventType;
    j["s1BearerSubscriptionCriteria"] = o.m_S1BearerSubscriptionCriteria;
    if(o.expiryDeadlineIsSet())
        j["expiryDeadline"] = o.m_ExpiryDeadline;
}

void from_json(const nlohmann::json& j, S1BearerSubscriptionPost& o)
{
    j.at("callbackReference").get_to(o.m_CallbackReference);
    if(j.contains("eventType"))
    {
        j.at("eventType").get_to(o.m_EventType);
        o.m_EventTypeIsSet = true;
    } 
    j.at("s1BearerSubscriptionCriteria").get_to(o.m_S1BearerSubscriptionCriteria);
    if(j.contains("expiryDeadline"))
    {
        j.at("expiryDeadline").get_to(o.m_ExpiryDeadline);
        o.m_ExpiryDeadlineIsSet = true;
    } 
}

std::string S1BearerSubscriptionPost::getCallbackReference() const
{
    return m_CallbackReference;
}
void S1BearerSubscriptionPost::setCallbackReference(std::string const& value)
{
    m_CallbackReference = value;
    
}
EventType S1BearerSubscriptionPost::getEventType() const
{
    return m_EventType;
}
void S1BearerSubscriptionPost::setEventType(EventType const& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}
bool S1BearerSubscriptionPost::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}
void S1BearerSubscriptionPost::unsetEventType()
{
    m_EventTypeIsSet = false;
}
S1BearerSubscriptionCriteria S1BearerSubscriptionPost::getS1BearerSubscriptionCriteria() const
{
    return m_S1BearerSubscriptionCriteria;
}
void S1BearerSubscriptionPost::setS1BearerSubscriptionCriteria(S1BearerSubscriptionCriteria const& value)
{
    m_S1BearerSubscriptionCriteria = value;
    
}
TimeStamp S1BearerSubscriptionPost::getExpiryDeadline() const
{
    return m_ExpiryDeadline;
}
void S1BearerSubscriptionPost::setExpiryDeadline(TimeStamp const& value)
{
    m_ExpiryDeadline = value;
    m_ExpiryDeadlineIsSet = true;
}
bool S1BearerSubscriptionPost::expiryDeadlineIsSet() const
{
    return m_ExpiryDeadlineIsSet;
}
void S1BearerSubscriptionPost::unsetExpiryDeadline()
{
    m_ExpiryDeadlineIsSet = false;
}

}
}
}

