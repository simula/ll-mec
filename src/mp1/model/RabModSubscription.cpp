/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RabModSubscription.h"

namespace llmec {
namespace mp1 {
namespace model {

RabModSubscription::RabModSubscription()
{
    m_CallbackReference = "";
    m_ExpiryDeadlineIsSet = false;
    
}

RabModSubscription::~RabModSubscription()
{
}

void RabModSubscription::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RabModSubscription& o)
{
    j = nlohmann::json();
    j["callbackReference"] = o.m_CallbackReference;
    j["_links"] = o.m__links;
    j["filterCriteria"] = o.m_FilterCriteria;
    if(o.expiryDeadlineIsSet())
        j["expiryDeadline"] = o.m_ExpiryDeadline;
}

void from_json(const nlohmann::json& j, RabModSubscription& o)
{
    j.at("callbackReference").get_to(o.m_CallbackReference);
    j.at("_links").get_to(o.m__links);
    j.at("filterCriteria").get_to(o.m_FilterCriteria);
    if(j.contains("expiryDeadline"))
    {
        j.at("expiryDeadline").get_to(o.m_ExpiryDeadline);
        o.m_ExpiryDeadlineIsSet = true;
    } 
}

std::string RabModSubscription::getCallbackReference() const
{
    return m_CallbackReference;
}
void RabModSubscription::setCallbackReference(std::string const& value)
{
    m_CallbackReference = value;
    
}
Link RabModSubscription::getLinks() const
{
    return m__links;
}
void RabModSubscription::setLinks(Link const& value)
{
    m__links = value;
    
}
FilterCriteriaAssocQci RabModSubscription::getFilterCriteria() const
{
    return m_FilterCriteria;
}
void RabModSubscription::setFilterCriteria(FilterCriteriaAssocQci const& value)
{
    m_FilterCriteria = value;
    
}
TimeStamp RabModSubscription::getExpiryDeadline() const
{
    return m_ExpiryDeadline;
}
void RabModSubscription::setExpiryDeadline(TimeStamp const& value)
{
    m_ExpiryDeadline = value;
    m_ExpiryDeadlineIsSet = true;
}
bool RabModSubscription::expiryDeadlineIsSet() const
{
    return m_ExpiryDeadlineIsSet;
}
void RabModSubscription::unsetExpiryDeadline()
{
    m_ExpiryDeadlineIsSet = false;
}

}
}
}

