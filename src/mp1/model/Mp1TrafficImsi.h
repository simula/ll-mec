/**
* MP1 API
* The ETSI MEC ISG MEC012 Radio Network Information API, AND The ETSI MEC ISG MEC011 Application Enablement API
* AND some additional MEC APIs described using OpenAPI
*
* The version of the OpenAPI document: 1.1.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Mp1_traffic_imsi.h
 *
 * 
 */

#ifndef Mp1_traffic_imsi_H_
#define Mp1_traffic_imsi_H_


#include <string>
#include <vector>
#include "json.h"

namespace llmec {
namespace mp1 {
namespace model {

/// <summary>
/// 
/// </summary>
class  Mp1TrafficImsi
{
public:
    Mp1TrafficImsi();
    virtual ~Mp1TrafficImsi();

    void validate();

    /////////////////////////////////////////////
    /// Mp1TrafficImsi members

    /// <summary>
    /// The list of UE identifiers (IMSI numbers) represented as strings for which traffic redirection for this specific service will be applied.
    /// </summary>
    std::vector<std::string>& getUeList();
        /// <summary>
    /// The original IP address of the service for which traffic will be redirected to the MEC server.
    /// </summary>
    std::string getServiceIp() const;
    void setServiceIp(std::string const& value);
        /// <summary>
    /// The transport protocol destination port for the flow to be redirected to the MEC server.
    /// </summary>
    int32_t getPort() const;
    void setPort(int32_t const value);
        /// <summary>
    /// The transport protocol of the traffic flows to redirect (1: TCP, 2: UDP, 0: any)
    /// </summary>
    int32_t getTransport() const;
    void setTransport(int32_t const value);
        /// <summary>
    /// The IP address of the MEC application instance to which traffic will be redirected.
    /// </summary>
    std::string getMecIpaddr() const;
    void setMecIpaddr(std::string const& value);
        /// <summary>
    /// The MAC address of the MEC application instance&#39;s network interface. (This is necessary due to the redirection mechanism&#39;s internal workings and might be become optional in future versions.)
    /// </summary>
    std::string getMecMacaddr() const;
    void setMecMacaddr(std::string const& value);
        /// <summary>
    /// The type of redirection. Should have the values *2* or *3*. (This field is reserved and is not used in this version. However, it has to have a valid value.)
    /// </summary>
    int32_t getType() const;
    void setType(int32_t const value);
    
    friend void to_json(nlohmann::json& j, const Mp1TrafficImsi& o);
    friend void from_json(const nlohmann::json& j, Mp1TrafficImsi& o);
protected:
    std::vector<std::string> m_Ue_list;

    std::string m_Service_ip;

    int32_t m_Port;

    int32_t m_Transport;

    std::string m_Mec_ipaddr;

    std::string m_Mec_macaddr;

    int32_t m_Type;

};

}
}
}

#endif /* Mp1_traffic_imsi_H_ */
