openapi: 3.0.0
info:
  title: MEC Service Registry
  version: v1
x-basePath: /MEC/{version}
paths:

  /services:
    get:
      description: |
        Service advertising/discovery.
        This function returns a list of all the registered MEC platform services and the respective API endpoints to access them.
      operationId: GET_services
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                #$ref: "#/components/schemas/ServiceList"
                
                example:
                  - DATA_TYPE:
                      - mec-ipaddr: IPv4
                        mec-macaddr: MAC
                        type: integer
                        url: string
                    DESCRIPTION: Request all traffic for the specified URL to be
                      resolved/redirected to the given MEC server.
                    METHOD:
                      - POST
                      - DELETE
                    NAME: traffic/redir-by-name
                    PARAMETERS:
                      - type
                      - url
                      - mec-ipaddr
                      - mec-macaddr
                    _URL: http://127.0.0.1:8080/v1/servicecall/traffic/redir-by-name
                  - DATA_TYPE:
                      - mec_ipaddr: IPv4
                        mec_macaddr: MAC
                        port: integer
                        service_ip: IPv4
                        transport: integer
                        type: integer
                        ue_list: list
                    DESCRIPTION: Request all traffic for the specified ip-port-protocol
                      combination and for a specific set of UEs to be redirected
                      to the given MEC server.
                    METHOD:
                      - POST
                      - DELETE
                    NAME: traffic/redir-by-type
                    PARAMETERS:
                      - type
                      - ue_list
                      - transport
                      - service_ip
                      - mec_ipaddr
                      - mec_macaddr
                      - port
                    _URL: http://127.0.0.1:8080/v1/servicecall/traffic/redir-by-type
                  - DATA_TYPE:
                      - UE_id: integer
                        eNB_id: IPv4 or integer
                    DESCRIPTION: CQI report for a single eNB-UE pair. enbid can either be
                      the IP address or the id of the eNB. ueid is the UE's
                      C-RNTI (for the moment).
                    METHOD: GET
                    NAME: rnis/CQI
                    PARAMETERS:
                      - eNB_id
                      - UE_id
                    _URL: http://127.0.0.1:8080/v1/servicecall/rnis/CQI
                  - DATA_TYPE:
                      - eNB_id: integer or IPv4
                    DESCRIPTION: Retrieve information about a specific eNB. The identifier
                      used could either be the eNB IP address or its ID.
                    METHOD: GET
                    NAME: rnis/eNB
                    PARAMETERS:
                      - eNB_id
                    _URL: http://127.0.0.1:8080/v1/servicecall/rnis/eNB
                  - DATA_TYPE:
                      - imsi: integer
                    DESCRIPTION: Full status report about a UE identified by IMSI. The
                      response also includes a CQI report.
                    METHOD: GET
                    NAME: rnis/UE/status
                    PARAMETERS:
                      - imsi
                    _URL: http://127.0.0.1:8080/v1/servicecall/rnis/UE/status
  /registration:
    post:
      description: |
        Register a MEC service.
      operationId: POST_registration
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                example:
                  RESPONSE: REGISTERED
        "400":
          description: This will be the response, e.g., if a mandatory parameter is
            missing. The missing parameters are indicated in the body of the
            response.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: INVALID_DATA ['URL']
        "409":
          description: This will be the response in case, e.g., the service is already
            registered.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: Already Registred
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                NAME:
                  title: Service name
                  description: This field uniquely identifies a MEC service.
                  example: traffic/redir-by-type
                  type: string
                DESCRIPTION:
                  title: Service description
                  description: Free-text description of the service.
                  example: Request all traffic for the specified ip-port-protocol
                    combination and for a specific set of UEs to be redirected
                    to the given MEC server.
                  type: string
                URL:
                  title: Service URL
                  description: The URL of the service. This is maintained internally in the
                    registry and is not exposed to applications. In order to
                    consume the service, applications need to access the
                    endpoint advertised by the registry providing the required
                    parameters. The registry then is responsible for executing
                    the API call by accessing this URL and returning the result
                    to the application. In other words, the registry performs
                    the translation between the API call exposed to the
                    application and the internal one, provided e.g. by the MEC
                    platform.
                  example: http://10.10.10.11:13000/api/mp1/traffic/imsi
                  type: string
                METHOD:
                  title: HTTP methods
                  description: List of allowed/implemented HTTP methods to access this
                    service. Valid strings are GET, POST, PUT, DELETE.
                  example:
                    - POST
                    - DELETE
                  type: string
                PARAMETERS:
                  title: API call parameters
                  description: List of parameters for this service call that should be
                    included in a request.
                  example:
                    - type
                    - ue_list
                    - transport
                    - service_ip
                    - mec_ipaddr
                    - mec_macaddr
                    - port
                  type: string
                DATA_TYPE:
                  title: Parameter data types
                  description: A list of key-value pairs indicating the data type for each
                    parameter of the request. It is mandatory that for each item
                    that appears in `PARAMETERS`, a pair is included in this
                    list where the key matches with the name of the respective
                    parameter.
                  example:
                    - mec_ipaddr: IPv4
                      mec_macaddr: MAC
                      port: integer
                      service_ip: IPv4
                      transport: integer
                      type: integer
                      ue_list: list
                  type: string
              required:
                - NAME
                - URL
                - METHOD
        required: true
        
  /servicecall/{service_name}:
    get:
      operationId: GET_servicecall-service_name
      responses:
        "200":
          description: ""
        "400":
          description: Method not registered for the requested service.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: "INVALID METHOD: 'GET'"
        "404":
          description: Service not registered.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: INVALID SELECTION
    post:
      operationId: POST_servicecall-service_name
      responses:
        "200":
          description: ""
        "400":
          description: Method not registered for the requested service.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: "INVALID METHOD: 'POST'"
        "404":
          description: Service not registered.
          content:
            application/json:
              schema:
                example:
                  RESPONSE: INVALID SELECTION
    delete:
      operationId: DELETE_servicecall-service_name
      responses:
        default:
          description: ""
    parameters:
      - in: path
        name: service_name
        required: true
        schema:
          type: string
  /deregistration:
    post:
      description: Unregister a service.
      operationId: POST_deregistration
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                example:
                  RESPONSE: Service Deleted
        "404":
          description: ""
          content:
            application/json:
              schema:
                example:
                  RESPONSE: Service Not Found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                NAME:
                  title: Name
                  description: Name of the function call.
                  example: rnis/UE/status
                  type: string
              required:
                - NAME
        required: true

              
servers:
  - url: http://localhost